; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	C:\Users\Mathew\Dropbox\Muzzler\windows-sync\MuzzlerSync\libs\Aurora SDK\Lib\Source\A2DWindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?value@?$integral_constant@I$01@std@@2IB	; std::integral_constant<unsigned int,2>::value
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?value@?$integral_constant@I$00@std@@2IB	; std::integral_constant<unsigned int,1>::value
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?value@?$_Maximum@$S@std@@2IB			; std::_Maximum<>::value
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@I$07@std@@2IB	; std::integral_constant<unsigned int,8>::value
PUBLIC	?value@?$integral_constant@I$03@std@@2IB	; std::integral_constant<unsigned int,4>::value
_BSS	SEGMENT
_GenericSansSerifFontFamily DD 01H DUP (?)
_GenericSerifFontFamily DD 01H DUP (?)
_GenericMonospaceFontFamily DD 01H DUP (?)
_GenericSansSerifFontFamilyBuffer DB 08H DUP (?)
_GenericSerifFontFamilyBuffer DB 08H DUP (?)
_GenericMonospaceFontFamilyBuffer DB 08H DUP (?)
_GenericTypographicStringFormatBuffer DB 08H DUP (?)
_GenericDefaultStringFormatBuffer DB 08H DUP (?)
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@I$03@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$03@std@@2IB DD 04H		; std::integral_constant<unsigned int,4>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$07@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$07@std@@2IB DD 08H		; std::integral_constant<unsigned int,8>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?value@?$_Maximum@$S@std@@2IB
CONST	SEGMENT
?value@?$_Maximum@$S@std@@2IB DD 00H			; std::_Maximum<>::value
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$00@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$00@std@@2IB DD 01H		; std::integral_constant<unsigned int,1>::value
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$01@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$01@std@@2IB DD 02H		; std::integral_constant<unsigned int,2>::value
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_hypot
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??3GdiplusBase@Gdiplus@@SAXPAX@Z		; Gdiplus::GdiplusBase::operator delete
PUBLIC	??2GdiplusBase@Gdiplus@@SAPAXI@Z		; Gdiplus::GdiplusBase::operator new
PUBLIC	??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput
PUBLIC	??0Color@Gdiplus@@QAE@EEE@Z			; Gdiplus::Color::Color
PUBLIC	??0Color@Gdiplus@@QAE@K@Z			; Gdiplus::Color::Color
PUBLIC	?GetValue@Color@Gdiplus@@QBEKXZ			; Gdiplus::Color::GetValue
PUBLIC	?MakeARGB@Color@Gdiplus@@SAKEEEE@Z		; Gdiplus::Color::MakeARGB
PUBLIC	??0Image@Gdiplus@@QAE@PB_WH@Z			; Gdiplus::Image::Image
PUBLIC	??1Image@Gdiplus@@UAE@XZ			; Gdiplus::Image::~Image
PUBLIC	?Clone@Image@Gdiplus@@UAEPAV12@XZ		; Gdiplus::Image::Clone
PUBLIC	??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
PUBLIC	?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage
PUBLIC	?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus
PUBLIC	??_GImage@Gdiplus@@UAEPAXI@Z			; Gdiplus::Image::`scalar deleting destructor'
PUBLIC	??1Brush@Gdiplus@@UAE@XZ			; Gdiplus::Brush::~Brush
PUBLIC	?Clone@Brush@Gdiplus@@UBEPAV12@XZ		; Gdiplus::Brush::Clone
PUBLIC	??0Brush@Gdiplus@@IAE@XZ			; Gdiplus::Brush::Brush
PUBLIC	??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ; Gdiplus::Brush::Brush
PUBLIC	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush
PUBLIC	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus
PUBLIC	??_GBrush@Gdiplus@@UAEPAXI@Z			; Gdiplus::Brush::`scalar deleting destructor'
PUBLIC	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
PUBLIC	?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ; Gdiplus::TextureBrush::TranslateTransform
PUBLIC	??1TextureBrush@Gdiplus@@UAE@XZ			; Gdiplus::TextureBrush::~TextureBrush
PUBLIC	??_GTextureBrush@Gdiplus@@UAEPAXI@Z		; Gdiplus::TextureBrush::`scalar deleting destructor'
PUBLIC	??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z		; Gdiplus::Pen::Pen
PUBLIC	??1Pen@Gdiplus@@QAE@XZ				; Gdiplus::Pen::~Pen
PUBLIC	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z		; Gdiplus::Graphics::Graphics
PUBLIC	?GetHDC@Graphics@Gdiplus@@QAEPAUHDC__@@XZ	; Gdiplus::Graphics::GetHDC
PUBLIC	?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z ; Gdiplus::Graphics::DrawRectangle
PUBLIC	?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ; Gdiplus::Graphics::Clear
PUBLIC	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle
PUBLIC	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ; Gdiplus::Graphics::DrawImage
PUBLIC	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics
PUBLIC	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus
PUBLIC	??_GA2DWindowProperties@@QAEPAXI@Z		; A2DWindowProperties::`scalar deleting destructor'
PUBLIC	??_GA2D@@QAEPAXI@Z				; A2D::`scalar deleting destructor'
PUBLIC	??0A2DWindow@@QAE@PAUA2DWindowProperties@@@Z	; A2DWindow::A2DWindow
PUBLIC	??1A2DWindow@@QAE@XZ				; A2DWindow::~A2DWindow
PUBLIC	?GetChildHwnd@A2DWindow@@QAEPAPAUHWND__@@XZ	; A2DWindow::GetChildHwnd
PUBLIC	?SetAurora2D@A2DWindow@@QAEXPAVA2D@@@Z		; A2DWindow::SetAurora2D
PUBLIC	?SetUndecorated@A2DWindow@@QAEX_N@Z		; A2DWindow::SetUndecorated
PUBLIC	?SetWindowPadding@A2DWindow@@QAEXH@Z		; A2DWindow::SetWindowPadding
PUBLIC	?SetShadow@A2DWindow@@QAEX_N@Z			; A2DWindow::SetShadow
PUBLIC	?SetPosition@A2DWindow@@QAEXHH@Z		; A2DWindow::SetPosition
PUBLIC	?SetSize@A2DWindow@@QAEXHH@Z			; A2DWindow::SetSize
PUBLIC	?SetPositionAndSize@A2DWindow@@QAEXHHHH@Z	; A2DWindow::SetPositionAndSize
PUBLIC	?SetTitle@A2DWindow@@QAEXPB_W@Z			; A2DWindow::SetTitle
PUBLIC	?SetVisible@A2DWindow@@QAEX_N@Z			; A2DWindow::SetVisible
PUBLIC	?Initialize@A2DWindow@@UAEJXZ			; A2DWindow::Initialize
PUBLIC	?Deinitialize@A2DWindow@@UAEXXZ			; A2DWindow::Deinitialize
PUBLIC	?GetClass@A2DWindow@@UAEPB_WXZ			; A2DWindow::GetClass
PUBLIC	?ToString@A2DWindow@@UAEPB_WXZ			; A2DWindow::ToString
PUBLIC	??8A2DWindow@@UAE_NPAVA2DAbstract@@@Z		; A2DWindow::operator==
PUBLIC	?RunMessageLoop@A2DWindow@@AAEXXZ		; A2DWindow::RunMessageLoop
PUBLIC	?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z	; A2DWindow::RegisterClassW
PUBLIC	?WndProc@A2DWindow@@CGJPAUHWND__@@IIJ@Z		; A2DWindow::WndProc
PUBLIC	?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z	; A2DWindow::CreateHandle
PUBLIC	?CreateComponentResources@A2DWindow@@AAEJXZ	; A2DWindow::CreateComponentResources
PUBLIC	?Update@A2DWindow@@AAEXXZ			; A2DWindow::Update
PUBLIC	?Render@A2DWindow@@AAEXXZ			; A2DWindow::Render
PUBLIC	?RenderComponent@A2DWindow@@AAEXXZ		; A2DWindow::RenderComponent
PUBLIC	?RenderComponentClear@A2DWindow@@AAEXXZ		; A2DWindow::RenderComponentClear
PUBLIC	?RenderComponentBorder@A2DWindow@@AAEXXZ	; A2DWindow::RenderComponentBorder
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_7Image@Gdiplus@@6B@				; Gdiplus::Image::`vftable'
PUBLIC	??_7Brush@Gdiplus@@6B@				; Gdiplus::Brush::`vftable'
PUBLIC	??_7TextureBrush@Gdiplus@@6B@			; Gdiplus::TextureBrush::`vftable'
PUBLIC	??_7A2DWindow@@6B@				; A2DWindow::`vftable'
PUBLIC	??_C@_1JG@KBMKKBBO@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1JI@PFABCBKN@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1JK@LDAMJFLC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1JM@EOFMCFLB@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1JO@IMDELIKI@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1KE@OCLLCGDJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1KA@EHKIDDCC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1KG@DIEFFILF@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1JI@BDDMOKPJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1BE@EPDDECBI@?$AAA?$AA2?$AAD?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@JICPPMBM@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@LFCPLEGJ@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Brush@Gdiplus@@6B@				; Gdiplus::Brush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBrush@Gdiplus@@@8			; Gdiplus::Brush `RTTI Type Descriptor'
PUBLIC	??_R3Brush@Gdiplus@@8				; Gdiplus::Brush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Brush@Gdiplus@@8				; Gdiplus::Brush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Brush@Gdiplus@@8			; Gdiplus::Brush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@GdiplusBase@Gdiplus@@8		; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVGdiplusBase@Gdiplus@@@8			; Gdiplus::GdiplusBase `RTTI Type Descriptor'
PUBLIC	??_R3GdiplusBase@Gdiplus@@8			; Gdiplus::GdiplusBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GdiplusBase@Gdiplus@@8			; Gdiplus::GdiplusBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GdiplusBase@Gdiplus@@8		; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Image@Gdiplus@@8			; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVImage@Gdiplus@@@8			; Gdiplus::Image `RTTI Type Descriptor'
PUBLIC	??_R3Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Image@Gdiplus@@8				; Gdiplus::Image::`RTTI Base Class Array'
PUBLIC	??_R4Image@Gdiplus@@6B@				; Gdiplus::Image::`RTTI Complete Object Locator'
PUBLIC	??_R4TextureBrush@Gdiplus@@6B@			; Gdiplus::TextureBrush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTextureBrush@Gdiplus@@@8		; Gdiplus::TextureBrush `RTTI Type Descriptor'
PUBLIC	??_R3TextureBrush@Gdiplus@@8			; Gdiplus::TextureBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TextureBrush@Gdiplus@@8			; Gdiplus::TextureBrush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TextureBrush@Gdiplus@@8		; Gdiplus::TextureBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@A2DAbstract@@8			; A2DAbstract::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVA2DAbstract@@@8				; A2DAbstract `RTTI Type Descriptor'
PUBLIC	??_R3A2DAbstract@@8				; A2DAbstract::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2A2DAbstract@@8				; A2DAbstract::`RTTI Base Class Array'
PUBLIC	??_R4A2DWindow@@6B@				; A2DWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVA2DWindow@@@8				; A2DWindow `RTTI Type Descriptor'
PUBLIC	??_R3A2DWindow@@8				; A2DWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2A2DWindow@@8				; A2DWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@A2DWindow@@8			; A2DWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageW@4:PROC
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassExW@4:PROC
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__UpdateLayeredWindow@36:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__BeginDeferWindowPos@4:PROC
EXTRN	__imp__DeferWindowPos@32:PROC
EXTRN	__imp__EndDeferWindowPos@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__LoadCursorW@8:PROC
EXTRN	__imp__LoadIconW@8:PROC
EXTRN	__imp___hypot:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	__imp_?_Syserror_map@std@@YAPBDH@Z:PROC
EXTRN	__imp_?_Winerror_map@std@@YAPBDH@Z:PROC
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_GdipAlloc@4:PROC
EXTRN	_GdipFree@4:PROC
EXTRN	_GdiplusStartup@12:PROC
EXTRN	??_EImage@Gdiplus@@UAEPAXI@Z:PROC		; Gdiplus::Image::`vector deleting destructor'
EXTRN	_GdipCloneBrush@8:PROC
EXTRN	_GdipDeleteBrush@4:PROC
EXTRN	_GdipCreateTexture@12:PROC
EXTRN	_GdipTranslateTextureTransform@16:PROC
EXTRN	_GdipCreatePen1@16:PROC
EXTRN	_GdipDeletePen@4:PROC
EXTRN	_GdipLoadImageFromFile@8:PROC
EXTRN	_GdipLoadImageFromFileICM@8:PROC
EXTRN	_GdipCloneImage@8:PROC
EXTRN	_GdipDisposeImage@4:PROC
EXTRN	_GdipCreateFromHDC@8:PROC
EXTRN	_GdipGetDC@8:PROC
EXTRN	_GdipDrawRectangle@24:PROC
EXTRN	_GdipGraphicsClear@8:PROC
EXTRN	_GdipFillRectangle@24:PROC
EXTRN	_GdipDrawImageRect@24:PROC
EXTRN	??_EBrush@Gdiplus@@UAEPAXI@Z:PROC		; Gdiplus::Brush::`vector deleting destructor'
EXTRN	??_ETextureBrush@Gdiplus@@UAEPAXI@Z:PROC	; Gdiplus::TextureBrush::`vector deleting destructor'
EXTRN	??0A2DAbstract@@QAE@XZ:PROC			; A2DAbstract::A2DAbstract
EXTRN	??1A2DAbstract@@QAE@XZ:PROC			; A2DAbstract::~A2DAbstract
EXTRN	?isClass@A2DAbstract@@UAE_NPB_W@Z:PROC		; A2DAbstract::isClass
EXTRN	??1A2DWindowProperties@@QAE@XZ:PROC		; A2DWindowProperties::~A2DWindowProperties
EXTRN	?GetRelativeLeft@A2DWindowProperties@@QAEMXZ:PROC ; A2DWindowProperties::GetRelativeLeft
EXTRN	?GetRelativeTop@A2DWindowProperties@@QAEMXZ:PROC ; A2DWindowProperties::GetRelativeTop
EXTRN	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ:PROC ; A2DWindowProperties::GetRelativeWidth
EXTRN	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ:PROC ; A2DWindowProperties::GetRelativeHeight
EXTRN	??1A2D@@QAE@XZ:PROC				; A2D::~A2D
EXTRN	?CreateResources@A2D@@QAEJXZ:PROC		; A2D::CreateResources
EXTRN	?Update@A2D@@QAEXXZ:PROC			; A2D::Update
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@A2DWindow@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@A2DWindow@@8 DD FLAT:??_R0?AVA2DWindow@@@8 ; A2DWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3A2DWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2A2DWindow@@8
rdata$r	SEGMENT
??_R2A2DWindow@@8 DD FLAT:??_R1A@?0A@EA@A2DWindow@@8	; A2DWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@A2DAbstract@@8
rdata$r	ENDS
;	COMDAT ??_R3A2DWindow@@8
rdata$r	SEGMENT
??_R3A2DWindow@@8 DD 00H				; A2DWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2A2DWindow@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVA2DWindow@@@8
data$r	SEGMENT
??_R0?AVA2DWindow@@@8 DD FLAT:??_7type_info@@6B@	; A2DWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVA2DWindow@@', 00H
data$r	ENDS
;	COMDAT ??_R4A2DWindow@@6B@
rdata$r	SEGMENT
??_R4A2DWindow@@6B@ DD 00H				; A2DWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVA2DWindow@@@8
	DD	FLAT:??_R3A2DWindow@@8
rdata$r	ENDS
;	COMDAT ??_R2A2DAbstract@@8
rdata$r	SEGMENT
??_R2A2DAbstract@@8 DD FLAT:??_R1A@?0A@EA@A2DAbstract@@8 ; A2DAbstract::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3A2DAbstract@@8
rdata$r	SEGMENT
??_R3A2DAbstract@@8 DD 00H				; A2DAbstract::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2A2DAbstract@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVA2DAbstract@@@8
data$r	SEGMENT
??_R0?AVA2DAbstract@@@8 DD FLAT:??_7type_info@@6B@	; A2DAbstract `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVA2DAbstract@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@A2DAbstract@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@A2DAbstract@@8 DD FLAT:??_R0?AVA2DAbstract@@@8 ; A2DAbstract::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3A2DAbstract@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TextureBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TextureBrush@Gdiplus@@8 DD FLAT:??_R0?AVTextureBrush@Gdiplus@@@8 ; Gdiplus::TextureBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TextureBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2TextureBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R2TextureBrush@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@TextureBrush@Gdiplus@@8 ; Gdiplus::TextureBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Brush@Gdiplus@@8
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R3TextureBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R3TextureBrush@Gdiplus@@8 DD 00H			; Gdiplus::TextureBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TextureBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTextureBrush@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVTextureBrush@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@ ; Gdiplus::TextureBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTextureBrush@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R4TextureBrush@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4TextureBrush@Gdiplus@@6B@ DD 00H			; Gdiplus::TextureBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTextureBrush@Gdiplus@@@8
	DD	FLAT:??_R3TextureBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R4Image@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Image@Gdiplus@@6B@ DD 00H				; Gdiplus::Image::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVImage@Gdiplus@@@8
	DD	FLAT:??_R3Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2Image@Gdiplus@@8
rdata$r	SEGMENT
??_R2Image@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@Image@Gdiplus@@8 ; Gdiplus::Image::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R3Image@Gdiplus@@8
rdata$r	SEGMENT
??_R3Image@Gdiplus@@8 DD 00H				; Gdiplus::Image::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVImage@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVImage@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Image `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVImage@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Image@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Image@Gdiplus@@8 DD FLAT:??_R0?AVImage@Gdiplus@@@8 ; Gdiplus::Image::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Image@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GdiplusBase@Gdiplus@@8 DD FLAT:??_R0?AVGdiplusBase@Gdiplus@@@8 ; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R2GdiplusBase@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@GdiplusBase@Gdiplus@@8 ; Gdiplus::GdiplusBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R3GdiplusBase@Gdiplus@@8 DD 00H			; Gdiplus::GdiplusBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGdiplusBase@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVGdiplusBase@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@ ; Gdiplus::GdiplusBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGdiplusBase@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	SEGMENT
??_R13?0A@EA@GdiplusBase@Gdiplus@@8 DD FLAT:??_R0?AVGdiplusBase@Gdiplus@@@8 ; Gdiplus::GdiplusBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Brush@Gdiplus@@8 DD FLAT:??_R0?AVBrush@Gdiplus@@@8 ; Gdiplus::Brush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Brush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R2Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R2Brush@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@Brush@Gdiplus@@8 ; Gdiplus::Brush::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R3Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R3Brush@Gdiplus@@8 DD 00H				; Gdiplus::Brush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Brush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBrush@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVBrush@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Brush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBrush@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R4Brush@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Brush@Gdiplus@@6B@ DD 00H				; Gdiplus::Brush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBrush@Gdiplus@@@8
	DD	FLAT:??_R3Brush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@LFCPLEGJ@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LFCPLEGJ@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ DB 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'T', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@JICPPMBM@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@JICPPMBM@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@ DB 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'T', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'T', 00H, 'i', 00H, 't', 00H, 'l'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EPDDECBI@?$AAA?$AA2?$AAD?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EPDDECBI@?$AAA?$AA2?$AAD?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ DB 'A'
	DB	00H, '2', 00H, 'D', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JI@BDDMOKPJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JI@BDDMOKPJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'g', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, ' ', 00H, '1', 00H, '.', 00H
	DB	'p', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1KG@DIEFFILF@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1KG@DIEFFILF@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'b', 00H, 'o', 00H, 't', 00H, 't', 00H
	DB	'o', 00H, 'm', 00H, 'R', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	' ', 00H, '[', 00H, 'a', 00H, ']', 00H, ' ', 00H, '1', 00H, '.'
	DB	00H, 'p', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1KA@EHKIDDCC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1KA@EHKIDDCC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'R', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '[', 00H, 'a', 00H
	DB	']', 00H, ' ', 00H, '1', 00H, '.', 00H, 'p', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KE@OCLLCGDJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1KE@OCLLCGDJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'b', 00H, 'o', 00H, 't', 00H, 't', 00H
	DB	'o', 00H, 'm', 00H, 'L', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'S'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H
	DB	'[', 00H, 'a', 00H, ']', 00H, ' ', 00H, '1', 00H, '.', 00H, 'p'
	DB	00H, 'n', 00H, 'g', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@IMDELIKI@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JO@IMDELIKI@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'L', 00H
	DB	'e', 00H, 'f', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, ' ', 00H, '[', 00H, 'a', 00H, ']', 00H
	DB	' ', 00H, '1', 00H, '.', 00H, 'p', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@EOFMCFLB@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JM@EOFMCFLB@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'b', 00H, 'o', 00H, 't', 00H, 't', 00H
	DB	'o', 00H, 'm', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, '[', 00H, 'a', 00H, ']', 00H, ' ', 00H
	DB	'1', 00H, '.', 00H, 'p', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@LDAMJFLC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JK@LDAMJFLC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '[', 00H, 'a', 00H, ']', 00H, ' ', 00H, '1', 00H
	DB	'.', 00H, 'p', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JI@PFABCBKN@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JI@PFABCBKN@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H
	DB	'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, '[', 00H, 'a', 00H, ']', 00H, ' ', 00H, '1', 00H, '.', 00H
	DB	'p', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@KBMKKBBO@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
CONST	SEGMENT
??_C@_1JG@KBMKKBBO@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'A', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 'a', 00H, ' ', 00H, 'S', 00H, 'D'
	DB	00H, 'K', 00H, '\', 00H, 'L', 00H, 'i', 00H, 'b', 00H, '\', 00H
	DB	'A', 00H, 's', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '-', 00H, 's', 00H, 'y', 00H, 'n'
	DB	00H, 'c', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '['
	DB	00H, 'a', 00H, ']', 00H, ' ', 00H, '1', 00H, '.', 00H, 'p', 00H
	DB	'n', 00H, 'g', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_7A2DWindow@@6B@
CONST	SEGMENT
??_7A2DWindow@@6B@ DD FLAT:??_R4A2DWindow@@6B@		; A2DWindow::`vftable'
	DD	FLAT:?Initialize@A2DWindow@@UAEJXZ
	DD	FLAT:?Deinitialize@A2DWindow@@UAEXXZ
	DD	FLAT:?GetClass@A2DWindow@@UAEPB_WXZ
	DD	FLAT:??8A2DWindow@@UAE_NPAVA2DAbstract@@@Z
	DD	FLAT:?ToString@A2DWindow@@UAEPB_WXZ
	DD	FLAT:?isClass@A2DAbstract@@UAE_NPB_W@Z
CONST	ENDS
;	COMDAT ??_7TextureBrush@Gdiplus@@6B@
CONST	SEGMENT
??_7TextureBrush@Gdiplus@@6B@ DD FLAT:??_R4TextureBrush@Gdiplus@@6B@ ; Gdiplus::TextureBrush::`vftable'
	DD	FLAT:??_ETextureBrush@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Brush@Gdiplus@@UBEPAV12@XZ
CONST	ENDS
;	COMDAT ??_7Brush@Gdiplus@@6B@
CONST	SEGMENT
??_7Brush@Gdiplus@@6B@ DD FLAT:??_R4Brush@Gdiplus@@6B@	; Gdiplus::Brush::`vftable'
	DD	FLAT:??_EBrush@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Brush@Gdiplus@@UBEPAV12@XZ
CONST	ENDS
;	COMDAT ??_7Image@Gdiplus@@6B@
CONST	SEGMENT
??_7Image@Gdiplus@@6B@ DD FLAT:??_R4Image@Gdiplus@@6B@	; Gdiplus::Image::`vftable'
	DD	FLAT:??_EImage@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Image@Gdiplus@@UAEPAV12@XZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderComponentBorder@A2DWindow@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderComponentBorder@A2DWindow@@AAEXXZ$0
__ehfuncinfo$?RenderComponentBorder@A2DWindow@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderComponentBorder@A2DWindow@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?RenderComponent@A2DWindow@@AAEXXZ DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?RenderComponent@A2DWindow@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?RenderComponent@A2DWindow@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateComponentResources@A2DWindow@@AAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateComponentResources@A2DWindow@@AAEJXZ$0
__ehfuncinfo$?CreateComponentResources@A2DWindow@@AAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateComponentResources@A2DWindow@@AAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z$0
__ehfuncinfo$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Brush@Gdiplus@@UBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Brush@Gdiplus@@UBEPAV12@XZ$0
__ehfuncinfo$?Clone@Brush@Gdiplus@@UBEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@Brush@Gdiplus@@UBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Image@Gdiplus@@UAEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Image@Gdiplus@@UAEPAV12@XZ$0
__ehfuncinfo$?Clone@Image@Gdiplus@@UAEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@Image@Gdiplus@@UAEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 605  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 601  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1504 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 728  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 731  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>

; 724  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1504 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 639  : 	_System_error_category _Error_objects<_Cat>::_System_object;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 637  : 	_Iostream_error_category _Error_objects<_Cat>::_Iostream_object;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 635  : 	_Generic_error_category _Error_objects<_Cat>::_Generic_object;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	mov	esi, esp
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	mov	esi, esp
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 605  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 601  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 579  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 574  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 552  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 92   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 877  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH

; 873  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?RenderComponentBorder@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
$T2 = -240						; size = 4
_borderPen$ = -36					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?RenderComponentBorder@A2DWindow@@AAEXXZ PROC		; A2DWindow::RenderComponentBorder, COMDAT
; _this$ = ecx

; 277  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RenderComponentBorder@A2DWindow@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 278  : 	Pen borderPen(Color(202, 225, 255), 1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	255					; 000000ffH
	push	225					; 000000e1H
	push	202					; 000000caH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Color@Gdiplus@@QAE@EEE@Z		; Gdiplus::Color::Color
	push	eax
	lea	ecx, DWORD PTR _borderPen$[ebp]
	call	??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z	; Gdiplus::Pen::Pen
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 279  : 	
; 280  : 	aGraphics->DrawRectangle(&borderPen, aWindowProps->aPadding, aWindowProps->aPadding, aWindowProps->aRealWidth - aWindowProps->aPadding * 2 - 1, aWindowProps->aRealHeight - aWindowProps->aPadding * 2 - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [ecx+8]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _borderPen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z ; Gdiplus::Graphics::DrawRectangle

; 281  : 	
; 282  : 	DeleteObject(&borderPen);

	mov	esi, esp
	lea	eax, DWORD PTR _borderPen$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 283  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _borderPen$[ebp]
	call	??1Pen@Gdiplus@@QAE@XZ			; Gdiplus::Pen::~Pen
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RenderComp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@RenderComp:
	DD	1
	DD	$LN6@RenderComp
$LN6@RenderComp:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN4@RenderComp
$LN4@RenderComp:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderComponentBorder@A2DWindow@@AAEXXZ$0:
	lea	ecx, DWORD PTR _borderPen$[ebp]
	jmp	??1Pen@Gdiplus@@QAE@XZ			; Gdiplus::Pen::~Pen
__ehhandler$?RenderComponentBorder@A2DWindow@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RenderComponentBorder@A2DWindow@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RenderComponentBorder@A2DWindow@@AAEXXZ ENDP		; A2DWindow::RenderComponentBorder
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?RenderComponentClear@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?RenderComponentClear@A2DWindow@@AAEXXZ PROC		; A2DWindow::RenderComponentClear, COMDAT
; _this$ = ecx

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 344  : 	aGraphics->Clear(Color::AlphaMask);

	push	-16777216				; ff000000H
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ; Gdiplus::Graphics::Clear

; 345  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderComponentClear@A2DWindow@@AAEXXZ ENDP		; A2DWindow::RenderComponentClear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?RenderComponent@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
tv626 = -540						; size = 4
tv528 = -540						; size = 4
tv620 = -536						; size = 4
tv603 = -536						; size = 4
tv586 = -536						; size = 4
tv553 = -536						; size = 4
tv542 = -536						; size = 4
tv519 = -536						; size = 4
tv510 = -536						; size = 4
tv491 = -536						; size = 4
tv468 = -536						; size = 4
_backgroundBrush$ = -336				; size = 12
_bottomShadowBrush$ = -316				; size = 12
_rightShadowBrush$ = -296				; size = 12
_leftShadowBrush$ = -276				; size = 12
_topShadowBrush$ = -256					; size = 12
_background$ = -236					; size = 16
_bottomRightShadow$ = -212				; size = 16
_topRightShadow$ = -188					; size = 16
_bottomLeftShadow$ = -164				; size = 16
_topLeftShadow$ = -140					; size = 16
_bottomShadow$ = -116					; size = 16
_rightShadow$ = -92					; size = 16
_leftShadow$ = -68					; size = 16
_topShadow$ = -44					; size = 16
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?RenderComponent@A2DWindow@@AAEXXZ PROC			; A2DWindow::RenderComponent, COMDAT
; _this$ = ecx

; 286  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RenderComponent@A2DWindow@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 287  : 	RenderComponentClear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderComponentClear@A2DWindow@@AAEXXZ	; A2DWindow::RenderComponentClear

; 288  : 
; 289  : 	Image topShadow(IDB_BSW_TOP_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1JG@KBMKKBBO@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _topShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 290  : 	Image leftShadow(IDB_BSW_LEFT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1JI@PFABCBKN@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _leftShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 291  : 	Image rightShadow(IDB_BSW_RIGHT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1JK@LDAMJFLC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _rightShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 292  : 	Image bottomShadow(IDB_BSW_BOTTOM_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1JM@EOFMCFLB@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _bottomShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 293  : 	Image topLeftShadow(IDB_BSW_TOP_LEFT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1JO@IMDELIKI@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _topLeftShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 294  : 	Image bottomLeftShadow(IDB_BSW_BOTTOM_LEFT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1KE@OCLLCGDJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _bottomLeftShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 295  : 	Image topRightShadow(IDB_BSW_TOP_RIGHT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1KA@EHKIDDCC@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _topRightShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 296  : 	Image bottomRightShadow(IDB_BSW_BOTTOM_RIGHT_SHADOW_PNG);

	push	0
	push	OFFSET ??_C@_1KG@DIEFFILF@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _bottomRightShadow$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 297  : 	Image background(IDB_BSW_BACKGROUND_PNG);

	push	0
	push	OFFSET ??_C@_1JI@BDDMOKPJ@?$AAl?$AAi?$AAb?$AAs?$AA?2?$AAA?$AAu?$AAr?$AAo?$AAr?$AAa?$AA?5?$AAS?$AAD?$AAK?$AA?2?$AAL?$AAi?$AAb?$AA?2?$AAA?$AAs?$AAs?$AAe?$AAt?$AAs?$AA?2?$AAI?$AAm?$AAa?$AAg?$AAe@
	lea	ecx, DWORD PTR _background$[ebp]
	call	??0Image@Gdiplus@@QAE@PB_WH@Z		; Gdiplus::Image::Image
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 298  : 
; 299  : 	TextureBrush topShadowBrush(&topShadow);

	push	0
	lea	eax, DWORD PTR _topShadow$[ebp]
	push	eax
	lea	ecx, DWORD PTR _topShadowBrush$[ebp]
	call	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 300  : 	TextureBrush leftShadowBrush(&leftShadow);

	push	0
	lea	eax, DWORD PTR _leftShadow$[ebp]
	push	eax
	lea	ecx, DWORD PTR _leftShadowBrush$[ebp]
	call	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 301  : 	TextureBrush rightShadowBrush(&rightShadow);

	push	0
	lea	eax, DWORD PTR _rightShadow$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rightShadowBrush$[ebp]
	call	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 302  : 	TextureBrush bottomShadowBrush(&bottomShadow);

	push	0
	lea	eax, DWORD PTR _bottomShadow$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bottomShadowBrush$[ebp]
	call	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 303  : 	TextureBrush backgroundBrush(&background);

	push	0
	lea	eax, DWORD PTR _background$[ebp]
	push	eax
	lea	ecx, DWORD PTR _backgroundBrush$[ebp]
	call	??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ; Gdiplus::TextureBrush::TextureBrush
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 304  : 
; 305  : 	topShadowBrush.TranslateTransform((REAL)aWindowProps->aShadowPadding, (REAL) 0);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _topShadowBrush$[ebp]
	call	?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ; Gdiplus::TextureBrush::TranslateTransform

; 306  : 	aGraphics->FillRectangle(&topShadowBrush, (REAL)aWindowProps->aShadowPadding, (REAL) 0, (REAL)aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aShadowPadding * 2, (REAL) aWindowProps->aPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv468[ebp]
	movss	xmm0, DWORD PTR tv468[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _topShadowBrush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 307  : 
; 308  : 	leftShadowBrush.TranslateTransform((REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aPadding);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _leftShadowBrush$[ebp]
	call	?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ; Gdiplus::TextureBrush::TranslateTransform

; 309  : 	aGraphics->FillRectangle(&leftShadowBrush, (REAL) 0, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aPadding, (REAL) aWindowProps->GetRelativeHeight() - (REAL) aWindowProps->aShadowPadding * 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv491[ebp]
	movss	xmm0, DWORD PTR tv491[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _leftShadowBrush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 310  : 
; 311  : 	rightShadowBrush.TranslateTransform((REAL) aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aPadding, (REAL) aWindowProps->aShadowPadding);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv510[ebp]
	movss	xmm0, DWORD PTR tv510[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rightShadowBrush$[ebp]
	call	?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ; Gdiplus::TextureBrush::TranslateTransform

; 312  : 	aGraphics->FillRectangle(&rightShadowBrush, (REAL) aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aPadding, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aPadding, (REAL) aWindowProps->GetRelativeHeight() - (REAL) aWindowProps->aShadowPadding * 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv519[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv528[ebp]
	movss	xmm0, DWORD PTR tv528[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rightShadowBrush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 313  : 
; 314  : 	bottomShadowBrush.TranslateTransform((REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->GetRelativeHeight() - (REAL) aWindowProps->aPadding);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv542[ebp]
	movss	xmm0, DWORD PTR tv542[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _bottomShadowBrush$[ebp]
	call	?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ; Gdiplus::TextureBrush::TranslateTransform

; 315  : 	aGraphics->FillRectangle(&bottomShadowBrush, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aRealHeight + (REAL) aWindowProps->aPadding, (REAL) aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aShadowPadding * 2, (REAL) aWindowProps->aPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv553[ebp]
	movss	xmm0, DWORD PTR tv553[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [edx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _bottomShadowBrush$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 316  : 
; 317  : 	aGraphics->DrawImage(&topLeftShadow, (REAL) 0, (REAL) 0, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _topLeftShadow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ; Gdiplus::Graphics::DrawImage

; 318  : 	aGraphics->DrawImage(&bottomLeftShadow, (REAL) 0, (REAL) aWindowProps->GetRelativeHeight() - (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv586[ebp]
	movss	xmm0, DWORD PTR tv586[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _bottomLeftShadow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ; Gdiplus::Graphics::DrawImage

; 319  : 	aGraphics->DrawImage(&topRightShadow, (REAL) aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aShadowPadding, (REAL) 0, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv603[ebp]
	movss	xmm0, DWORD PTR tv603[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _topRightShadow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ; Gdiplus::Graphics::DrawImage

; 320  : 	aGraphics->DrawImage(&bottomRightShadow, (REAL) aWindowProps->GetRelativeWidth() - (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->GetRelativeHeight() - (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding, (REAL) aWindowProps->aShadowPadding);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv620[ebp]
	movss	xmm0, DWORD PTR tv620[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv626[ebp]
	movss	xmm0, DWORD PTR tv626[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _bottomRightShadow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ; Gdiplus::Graphics::DrawImage

; 321  : 
; 322  : 	aGraphics->FillRectangle(&backgroundBrush, (REAL) aWindowProps->aPadding, (REAL) aWindowProps->aPadding, (REAL) aWindowProps->aRealWidth, (REAL) aWindowProps->aRealHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _backgroundBrush$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 323  : 
; 324  : 	DeleteObject(&topShadowBrush);

	mov	esi, esp
	lea	eax, DWORD PTR _topShadowBrush$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 325  : 	DeleteObject(&leftShadowBrush);

	mov	esi, esp
	lea	eax, DWORD PTR _leftShadowBrush$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 326  : 	DeleteObject(&backgroundBrush);

	mov	esi, esp
	lea	eax, DWORD PTR _backgroundBrush$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 327  : 	DeleteObject(&rightShadowBrush);

	mov	esi, esp
	lea	eax, DWORD PTR _rightShadowBrush$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 328  : 	DeleteObject(&bottomShadowBrush);

	mov	esi, esp
	lea	eax, DWORD PTR _bottomShadowBrush$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 329  : 
; 330  : 	DeleteObject(&topShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _topShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 331  : 	DeleteObject(&leftShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _leftShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 332  : 	DeleteObject(&rightShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _rightShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 333  : 	DeleteObject(&bottomShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _bottomShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 334  : 	DeleteObject(&topLeftShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _topLeftShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 335  : 	DeleteObject(&topRightShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _topRightShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 336  : 	DeleteObject(&bottomRightShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _bottomRightShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 337  : 	DeleteObject(&bottomLeftShadow);

	mov	esi, esp
	lea	eax, DWORD PTR _bottomLeftShadow$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 338  : 	DeleteObject(&background);

	mov	esi, esp
	lea	eax, DWORD PTR _background$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 339  : 
; 340  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _backgroundBrush$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _bottomShadowBrush$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _rightShadowBrush$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _leftShadowBrush$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _topShadowBrush$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _background$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _bottomRightShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _topRightShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _bottomLeftShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _topLeftShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _bottomShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _rightShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _leftShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _topShadow$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@RenderComp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN33@RenderComp:
	DD	14					; 0000000eH
	DD	$LN32@RenderComp
$LN32@RenderComp:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN17@RenderComp
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN18@RenderComp
	DD	-92					; ffffffa4H
	DD	16					; 00000010H
	DD	$LN19@RenderComp
	DD	-116					; ffffff8cH
	DD	16					; 00000010H
	DD	$LN20@RenderComp
	DD	-140					; ffffff74H
	DD	16					; 00000010H
	DD	$LN21@RenderComp
	DD	-164					; ffffff5cH
	DD	16					; 00000010H
	DD	$LN22@RenderComp
	DD	-188					; ffffff44H
	DD	16					; 00000010H
	DD	$LN23@RenderComp
	DD	-212					; ffffff2cH
	DD	16					; 00000010H
	DD	$LN24@RenderComp
	DD	-236					; ffffff14H
	DD	16					; 00000010H
	DD	$LN25@RenderComp
	DD	-256					; ffffff00H
	DD	12					; 0000000cH
	DD	$LN26@RenderComp
	DD	-276					; fffffeecH
	DD	12					; 0000000cH
	DD	$LN27@RenderComp
	DD	-296					; fffffed8H
	DD	12					; 0000000cH
	DD	$LN28@RenderComp
	DD	-316					; fffffec4H
	DD	12					; 0000000cH
	DD	$LN29@RenderComp
	DD	-336					; fffffeb0H
	DD	12					; 0000000cH
	DD	$LN30@RenderComp
$LN30@RenderComp:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	66					; 00000042H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN29@RenderComp:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN28@RenderComp:
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN27@RenderComp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN26@RenderComp:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN25@RenderComp:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN24@RenderComp:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN23@RenderComp:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN22@RenderComp:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN21@RenderComp:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN20@RenderComp:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN19@RenderComp:
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN18@RenderComp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN17@RenderComp:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$0:
	lea	ecx, DWORD PTR _topShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$1:
	lea	ecx, DWORD PTR _leftShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$2:
	lea	ecx, DWORD PTR _rightShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$3:
	lea	ecx, DWORD PTR _bottomShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$4:
	lea	ecx, DWORD PTR _topLeftShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$5:
	lea	ecx, DWORD PTR _bottomLeftShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$6:
	lea	ecx, DWORD PTR _topRightShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$7:
	lea	ecx, DWORD PTR _bottomRightShadow$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$8:
	lea	ecx, DWORD PTR _background$[ebp]
	jmp	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$9:
	lea	ecx, DWORD PTR _topShadowBrush$[ebp]
	jmp	??1TextureBrush@Gdiplus@@UAE@XZ
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$10:
	lea	ecx, DWORD PTR _leftShadowBrush$[ebp]
	jmp	??1TextureBrush@Gdiplus@@UAE@XZ
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$11:
	lea	ecx, DWORD PTR _rightShadowBrush$[ebp]
	jmp	??1TextureBrush@Gdiplus@@UAE@XZ
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$12:
	lea	ecx, DWORD PTR _bottomShadowBrush$[ebp]
	jmp	??1TextureBrush@Gdiplus@@UAE@XZ
__unwindfunclet$?RenderComponent@A2DWindow@@AAEXXZ$13:
	lea	ecx, DWORD PTR _backgroundBrush$[ebp]
	jmp	??1TextureBrush@Gdiplus@@UAE@XZ
__ehhandler$?RenderComponent@A2DWindow@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RenderComponent@A2DWindow@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RenderComponent@A2DWindow@@AAEXXZ ENDP			; A2DWindow::RenderComponent
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?Render@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Render@A2DWindow@@AAEXXZ PROC				; A2DWindow::Render, COMDAT
; _this$ = ecx

; 204  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	RenderComponent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderComponent@A2DWindow@@AAEXXZ	; A2DWindow::RenderComponent

; 206  : 	RenderComponentBorder();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderComponentBorder@A2DWindow@@AAEXXZ ; A2DWindow::RenderComponentBorder

; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Render@A2DWindow@@AAEXXZ ENDP				; A2DWindow::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?Update@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
_blendFunction$ = -64					; size = 4
_ptSrc$ = -52						; size = 8
_ptDst$ = -36						; size = 8
_screenDC$ = -20					; size = 4
_this$ = -8						; size = 4
?Update@A2DWindow@@AAEXXZ PROC				; A2DWindow::Update, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	Render();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Render@A2DWindow@@AAEXXZ		; A2DWindow::Render

; 212  : 
; 213  : 	// A2DAbstractComponent::Update(); <---- We will use this later. This is an example of inheritence and framwork coding!!
; 214  : 
; 215  : 	HDC screenDC = GetDC(NULL);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _screenDC$[ebp], eax

; 216  : 	POINT ptDst = { (int)aWindowProps->GetRelativeLeft(), (int) aWindowProps->GetRelativeTop() };

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeLeft@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeLeft
	call	__ftol2_sse
	mov	DWORD PTR _ptDst$[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeTop@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeTop
	call	__ftol2_sse
	mov	DWORD PTR _ptDst$[ebp+4], eax

; 217  : 	POINT ptSrc = { 0, 0 };

	mov	DWORD PTR _ptSrc$[ebp], 0
	mov	DWORD PTR _ptSrc$[ebp+4], 0

; 218  : 
; 219  : 	BLENDFUNCTION blendFunction;
; 220  : 	blendFunction.AlphaFormat = AC_SRC_ALPHA;

	mov	BYTE PTR _blendFunction$[ebp+3], 1

; 221  : 	blendFunction.BlendFlags = 0;

	mov	BYTE PTR _blendFunction$[ebp+1], 0

; 222  : 	blendFunction.BlendOp = AC_SRC_OVER;

	mov	BYTE PTR _blendFunction$[ebp], 0

; 223  : 	blendFunction.SourceConstantAlpha = 255;

	mov	BYTE PTR _blendFunction$[ebp+2], 255	; 000000ffH

; 224  : 
; 225  : 	UpdateLayeredWindow(aParentHwnd, screenDC, &ptDst, &aWindowSize, aGraphics->GetHDC(), &ptSrc, 0, &blendFunction, 2);

	mov	esi, esp
	push	2
	lea	eax, DWORD PTR _blendFunction$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _ptSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?GetHDC@Graphics@Gdiplus@@QAEPAUHDC__@@XZ ; Gdiplus::Graphics::GetHDC
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	lea	ecx, DWORD PTR _ptDst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _screenDC$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__UpdateLayeredWindow@36
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Update:
	DD	3
	DD	$LN6@Update
$LN6@Update:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN3@Update
	DD	-52					; ffffffccH
	DD	8
	DD	$LN4@Update
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN5@Update
$LN5@Update:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN4@Update:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN3@Update:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?Update@A2DWindow@@AAEXXZ ENDP				; A2DWindow::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?CreateComponentResources@A2DWindow@@AAEJXZ
_TEXT	SEGMENT
tv133 = -308						; size = 4
$T2 = -300						; size = 8
$T3 = -284						; size = 4
$T4 = -272						; size = 4
_memBitmap$ = -68					; size = 4
_memDC$ = -56						; size = 4
_hdc$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?CreateComponentResources@A2DWindow@@AAEJXZ PROC	; A2DWindow::CreateComponentResources, COMDAT
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateComponentResources@A2DWindow@@AAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	HRESULT hr;
; 231  : 	HDC hdc;
; 232  : 	HDC memDC;
; 233  : 
; 234  : 	hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 235  : 	hdc = GetDC(aParentHwnd);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax

; 236  : 	memDC = CreateCompatibleDC(hdc);

	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _memDC$[ebp], eax

; 237  : 
; 238  : 	aWindowSize = { (int)aWindowProps->GetRelativeWidth(), (int)aWindowProps->GetRelativeHeight() };

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	call	__ftol2_sse
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	call	__ftol2_sse
	mov	DWORD PTR $T2[ebp+4], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+44], eax
	mov	ecx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+48], ecx

; 239  : 
; 240  : 	HBITMAP memBitmap = CreateCompatibleBitmap(hdc, (int)aWindowProps->GetRelativeWidth(), (int)aWindowProps->GetRelativeHeight());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	call	__ftol2_sse
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	call	__ftol2_sse
	push	eax
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _memBitmap$[ebp], eax

; 241  : 
; 242  : 	SelectObject(memDC, memBitmap);

	mov	esi, esp
	mov	eax, DWORD PTR _memBitmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 243  : 
; 244  : 	aGraphics =  new Graphics(memDC);

	push	8
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@CreateComp
	mov	eax, DWORD PTR _memDC$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z	; Gdiplus::Graphics::Graphics
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@CreateComp
$LN3@CreateComp:
	mov	DWORD PTR tv133[ebp], 0
$LN4@CreateComp:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+40], eax

; 245  : 
; 246  : 	return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 247  : 
; 248  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateComponentResources@A2DWindow@@AAEJXZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateComponentResources@A2DWindow@@AAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateComponentResources@A2DWindow@@AAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateComponentResources@A2DWindow@@AAEJXZ ENDP	; A2DWindow::CreateComponentResources
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z
_TEXT	SEGMENT
tv165 = -364						; size = 4
tv137 = -364						; size = 4
tv133 = -364						; size = 4
tv130 = -364						; size = 4
tv95 = -364						; size = 4
tv87 = -364						; size = 4
tv79 = -364						; size = 4
tv71 = -364						; size = 4
_i$1 = -164						; size = 4
_hi$2 = -152						; size = 4
_titleName$ = -140					; size = 4
_className$ = -128					; size = 4
_lExStyle$ = -116					; size = 4
_lStyle$ = -104						; size = 4
_height$ = -92						; size = 4
_width$ = -80						; size = 4
_top$ = -68						; size = 4
_left$ = -56						; size = 4
_hwndParent$ = -44					; size = 4
_hWnd$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_xHandler$ = 8						; size = 4
?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z PROC	; A2DWindow::CreateHandle, COMDAT
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	HRESULT				hr;
; 163  : 	HWND				hWnd;
; 164  : 	HWND				hwndParent;
; 165  : 	float					left, top, width, height;
; 166  : 	DWORD				lStyle, lExStyle;
; 167  : 	LPCWSTR				className, titleName;
; 168  : 	
; 169  : 	left = xHandler == aParentHwnd ? aWindowProps->GetRelativeLeft() : aWindowProps->aRealLeft;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN5@CreateHand
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeLeft@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeLeft
	fstp	DWORD PTR tv71[ebp]
	jmp	SHORT $LN6@CreateHand
$LN5@CreateHand:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR tv71[ebp], xmm0
$LN6@CreateHand:
	movss	xmm0, DWORD PTR tv71[ebp]
	movss	DWORD PTR _left$[ebp], xmm0

; 170  : 	top = xHandler == aParentHwnd ? aWindowProps->GetRelativeTop() : aWindowProps->aRealTop;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN7@CreateHand
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeTop@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeTop
	fstp	DWORD PTR tv79[ebp]
	jmp	SHORT $LN8@CreateHand
$LN7@CreateHand:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR tv79[ebp], xmm0
$LN8@CreateHand:
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR _top$[ebp], xmm0

; 171  : 	width = xHandler == aParentHwnd ? aWindowProps->GetRelativeWidth() : aWindowProps->aRealWidth;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN9@CreateHand
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeWidth@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeWidth
	fstp	DWORD PTR tv87[ebp]
	jmp	SHORT $LN10@CreateHand
$LN9@CreateHand:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR tv87[ebp], xmm0
$LN10@CreateHand:
	movss	xmm0, DWORD PTR tv87[ebp]
	movss	DWORD PTR _width$[ebp], xmm0

; 172  : 	height = xHandler == aParentHwnd ? aWindowProps->GetRelativeHeight() : aWindowProps->aRealHeight;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN11@CreateHand
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetRelativeHeight@A2DWindowProperties@@QAEMXZ ; A2DWindowProperties::GetRelativeHeight
	fstp	DWORD PTR tv95[ebp]
	jmp	SHORT $LN12@CreateHand
$LN11@CreateHand:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv95[ebp], xmm0
$LN12@CreateHand:
	movss	xmm0, DWORD PTR tv95[ebp]
	movss	DWORD PTR _height$[ebp], xmm0

; 173  : 	lStyle = xHandler == aParentHwnd ? WS_POPUP | WS_OVERLAPPED : WS_POPUP;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN13@CreateHand
	mov	DWORD PTR tv130[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN14@CreateHand
$LN13@CreateHand:
	mov	DWORD PTR tv130[ebp], -2147483648	; 80000000H
$LN14@CreateHand:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _lStyle$[ebp], eax

; 174  : 	lExStyle = xHandler == aParentHwnd ? WS_EX_LAYERED | WS_EX_APPWINDOW : 0;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN15@CreateHand
	mov	DWORD PTR tv133[ebp], 786432		; 000c0000H
	jmp	SHORT $LN16@CreateHand
$LN15@CreateHand:
	mov	DWORD PTR tv133[ebp], 0
$LN16@CreateHand:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR _lExStyle$[ebp], eax

; 175  : 	hwndParent = xHandler == aParentHwnd ? HWND_DESKTOP : aParentHwnd;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN17@CreateHand
	mov	DWORD PTR tv137[ebp], 0
	jmp	SHORT $LN18@CreateHand
$LN17@CreateHand:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv137[ebp], ecx
$LN18@CreateHand:
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _hwndParent$[ebp], edx

; 176  : 	className = aWindowProps->aWindowClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _className$[ebp], edx

; 177  : 	titleName = aWindowProps->aWindowTitle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _titleName$[ebp], edx

; 178  : 
; 179  : 	hWnd = CreateWindowEx(lExStyle, className, titleName, lStyle, (int)left, (int)top,
; 180  : 		(int)width, (int) height, hwndParent, NULL, *aWindowProps->aHInstance, this);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hwndParent$[ebp]
	push	edx
	cvttss2si eax, DWORD PTR _height$[ebp]
	push	eax
	cvttss2si ecx, DWORD PTR _width$[ebp]
	push	ecx
	cvttss2si edx, DWORD PTR _top$[ebp]
	push	edx
	cvttss2si eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lStyle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _titleName$[ebp]
	push	edx
	mov	eax, DWORD PTR _className$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lExStyle$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateWindowExW@48
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hWnd$[ebp], eax

; 181  : 
; 182  : 	if (hWnd == 0)

	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN2@CreateHand

; 183  : 	{
; 184  : 		DWORD hi = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hi$2[ebp], eax

; 185  : 		int i = 0;

	mov	DWORD PTR _i$1[ebp], 0
$LN2@CreateHand:

; 186  : 	}
; 187  : 	
; 188  : 	hr = hWnd ? S_OK : E_FAIL;

	cmp	DWORD PTR _hWnd$[ebp], 0
	je	SHORT $LN19@CreateHand
	mov	DWORD PTR tv165[ebp], 0
	jmp	SHORT $LN20@CreateHand
$LN19@CreateHand:
	mov	DWORD PTR tv165[ebp], -2147467259	; 80004005H
$LN20@CreateHand:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _hr$[ebp], eax

; 189  : 
; 190  : 	xHandler = hWnd;

	mov	eax, DWORD PTR _xHandler$[ebp]
	mov	ecx, DWORD PTR _hWnd$[ebp]
	mov	DWORD PTR [eax], ecx

; 191  : 
; 192  : 	CurrentStyleProc = WS_EX_APPWINDOW;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 262144		; 00040000H

; 193  : 	
; 194  : 	if (aChildHwnd && aParentHwnd)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@CreateHand
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@CreateHand

; 195  : 	{
; 196  : 		// Force the child on top of parent!
; 197  : 		SetWindowPos(aChildHwnd, aParentHwnd, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);

	mov	esi, esp
	push	3
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CreateHand:

; 198  : 	}
; 199  : 
; 200  : 	return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z ENDP	; A2DWindow::CreateHandle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?WndProc@A2DWindow@@CGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
_pCreate$1 = -20					; size = 4
_aWindow$ = -8						; size = 4
_xHwnd$ = 8						; size = 4
_xMessage$ = 12						; size = 4
_xWParam$ = 16						; size = 4
_xLParam$ = 20						; size = 4
?WndProc@A2DWindow@@CGJPAUHWND__@@IIJ@Z PROC		; A2DWindow::WndProc, COMDAT

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 349  : 	A2DWindow * aWindow;
; 350  : 
; 351  : 	if (xMessage == WM_CREATE)

	cmp	DWORD PTR _xMessage$[ebp], 1
	jne	SHORT $LN6@WndProc

; 352  : 	{
; 353  : 		CREATESTRUCT *pCreate = reinterpret_cast<CREATESTRUCT*>(xLParam);

	mov	eax, DWORD PTR _xLParam$[ebp]
	mov	DWORD PTR _pCreate$1[ebp], eax

; 354  : 		aWindow = reinterpret_cast<A2DWindow*>(pCreate->lpCreateParams);

	mov	eax, DWORD PTR _pCreate$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _aWindow$[ebp], ecx

; 355  : 		SetWindowLongPtr(xHwnd, GWLP_USERDATA, (LONG_PTR)aWindow); // <-------------- Brent. Try to move this out of the static method.

	mov	esi, esp
	mov	eax, DWORD PTR _aWindow$[ebp]
	push	eax
	push	-21					; ffffffebH
	mov	ecx, DWORD PTR _xHwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 356  : 		return 1;

	mov	eax, 1
	jmp	$LN7@WndProc

; 357  : 	}
; 358  : 	else

	jmp	SHORT $LN5@WndProc
$LN6@WndProc:

; 359  : 	{
; 360  : 		aWindow = reinterpret_cast<A2DWindow *>(static_cast<LONG_PTR>(GetWindowLongPtrW(xHwnd, GWLP_USERDATA)));

	mov	esi, esp
	push	-21					; ffffffebH
	mov	eax, DWORD PTR _xHwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _aWindow$[ebp], eax

; 361  : 		
; 362  : 		switch (xMessage){

	mov	eax, DWORD PTR _xMessage$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN1@WndProc
	cmp	DWORD PTR tv72[ebp], 16			; 00000010H
	je	SHORT $LN2@WndProc
	jmp	SHORT $LN5@WndProc
$LN2@WndProc:

; 363  : 		case WM_CLOSE:
; 364  : 				DestroyWindow(xHwnd);

	mov	esi, esp
	mov	eax, DWORD PTR _xHwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 365  : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN7@WndProc
$LN1@WndProc:

; 366  : 		case WM_DESTROY:
; 367  : 				PostQuitMessage(0);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 368  : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN7@WndProc
$LN5@WndProc:

; 369  : 				/*		default:
; 370  : 			return aWindow ? aWindow->aAurora ? xHwnd == aWindow->aChildHwnd ? aWindow->aAurora->PumpWindowMsg(&xHwnd, &xMessage, &xWParam, &xLParam)
; 371  : 				: DefWindowProc(xHwnd, xMessage, xWParam, xLParam) : DefWindowProc(xHwnd, xMessage, xWParam, xLParam) : DefWindowProc(xHwnd, xMessage, xWParam, xLParam);*/
; 372  : 		}
; 373  : 	}
; 374  : 
; 375  : 	return	DefWindowProc(xHwnd, xMessage, xWParam, xLParam);

	mov	esi, esp
	mov	eax, DWORD PTR _xLParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xWParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xMessage$[ebp]
	push	edx
	mov	eax, DWORD PTR _xHwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@WndProc:

; 376  : 
; 377  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WndProc@A2DWindow@@CGJPAUHWND__@@IIJ@Z ENDP		; A2DWindow::WndProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z
_TEXT	SEGMENT
_wcex$ = -64						; size = 48
_this$ = -8						; size = 4
_xHwnd$ = 8						; size = 4
?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z PROC	; A2DWindow::RegisterClassW, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	WNDCLASSEX wcex = { sizeof(WNDCLASSEX) };

	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H
	push	44					; 0000002cH
	push	0
	lea	eax, DWORD PTR _wcex$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 128  : 	wcex.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;

	mov	DWORD PTR _wcex$[ebp+4], 35		; 00000023H

; 129  : 	wcex.lpfnWndProc = A2DWindow::WndProc;

	mov	DWORD PTR _wcex$[ebp+8], OFFSET ?WndProc@A2DWindow@@CGJPAUHWND__@@IIJ@Z ; A2DWindow::WndProc

; 130  : 	wcex.cbClsExtra = 0;

	mov	DWORD PTR _wcex$[ebp+12], 0

; 131  : 	wcex.cbWndExtra = 0;

	mov	DWORD PTR _wcex$[ebp+16], 0

; 132  : 	wcex.hInstance = *aWindowProps->aHInstance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _wcex$[ebp+20], eax

; 133  : 	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);

	mov	esi, esp
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wcex$[ebp+24], eax

; 134  : 	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);

	mov	esi, esp
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wcex$[ebp+28], eax

; 135  : 	wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__GetStockObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wcex$[ebp+32], eax

; 136  : 	wcex.lpszMenuName = NULL;

	mov	DWORD PTR _wcex$[ebp+36], 0

; 137  : 	wcex.lpszClassName = aWindowProps->aWindowClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _wcex$[ebp+40], edx

; 138  : 	wcex.hIconSm = LoadIcon(*aWindowProps->aHInstance, IDI_APPLICATION);

	mov	esi, esp
	push	32512					; 00007f00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__LoadIconW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wcex$[ebp+44], eax

; 139  : 
; 140  : 	return RegisterClassEx(&wcex);

	mov	esi, esp
	lea	eax, DWORD PTR _wcex$[ebp]
	push	eax
	call	DWORD PTR __imp__RegisterClassExW@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@RegisterCl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@RegisterCl:
	DD	1
	DD	$LN4@RegisterCl
$LN4@RegisterCl:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@RegisterCl
$LN3@RegisterCl:
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z ENDP	; A2DWindow::RegisterClassW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?RunMessageLoop@A2DWindow@@AAEXXZ
_TEXT	SEGMENT
_msg$ = -44						; size = 28
_this$ = -8						; size = 4
?RunMessageLoop@A2DWindow@@AAEXXZ PROC			; A2DWindow::RunMessageLoop, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@RunMessage:

; 145  : 	MSG msg;
; 146  : 
; 147  : 
; 148  : 	while (aOptionVisible)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	SHORT $LN5@RunMessage

; 149  : 	{
; 150  : 		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))

	mov	esi, esp
	push	1
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@RunMessage

; 151  : 		{
; 152  : 			TranslateMessage(&msg);

	mov	esi, esp
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 153  : 			DispatchMessage(&msg);

	mov	esi, esp
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__DispatchMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RunMessage:

; 154  : 		}
; 155  : 
; 156  : 		if(aAurora) aAurora->Update();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@RunMessage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Update@A2D@@QAEXXZ			; A2D::Update
$LN1@RunMessage:

; 157  : 	}

	jmp	SHORT $LN4@RunMessage
$LN5@RunMessage:

; 158  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RunMessage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@RunMessage:
	DD	1
	DD	$LN8@RunMessage
$LN8@RunMessage:
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN7@RunMessage
$LN7@RunMessage:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
?RunMessageLoop@A2DWindow@@AAEXXZ ENDP			; A2DWindow::RunMessageLoop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ??8A2DWindow@@UAE_NPAVA2DAbstract@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xAbstract$ = 8						; size = 4
??8A2DWindow@@UAE_NPAVA2DAbstract@@@Z PROC		; A2DWindow::operator==, COMDAT
; _this$ = ecx

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 398  : 	return false;

	xor	al, al

; 399  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8A2DWindow@@UAE_NPAVA2DAbstract@@@Z ENDP		; A2DWindow::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?ToString@A2DWindow@@UAEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToString@A2DWindow@@UAEPB_WXZ PROC			; A2DWindow::ToString, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 	return L"A2DWindow";

	mov	eax, OFFSET ??_C@_1BE@EPDDECBI@?$AAA?$AA2?$AAD?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@

; 394  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToString@A2DWindow@@UAEPB_WXZ ENDP			; A2DWindow::ToString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?GetClass@A2DWindow@@UAEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetClass@A2DWindow@@UAEPB_WXZ PROC			; A2DWindow::GetClass, COMDAT
; _this$ = ecx

; 387  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 388  : 	return L"A2DWindow";

	mov	eax, OFFSET ??_C@_1BE@EPDDECBI@?$AAA?$AA2?$AAD?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@

; 389  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@A2DWindow@@UAEPB_WXZ ENDP			; A2DWindow::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?Deinitialize@A2DWindow@@UAEXXZ
_TEXT	SEGMENT
tv80 = -256						; size = 4
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
$T4 = -212						; size = 4
_this$ = -8						; size = 4
?Deinitialize@A2DWindow@@UAEXXZ PROC			; A2DWindow::Deinitialize, COMDAT
; _this$ = ecx

; 436  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  : 	if (aWindowProps)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Deinitiali

; 438  : 	{
; 439  : 		delete aWindowProps;  // <-- delete the pointer NOT the struct since this was passed in to you.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@Deinitiali
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GA2DWindowProperties@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN6@Deinitiali
$LN5@Deinitiali:
	mov	DWORD PTR tv71[ebp], 0
$LN6@Deinitiali:

; 440  : 		aWindowProps = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@Deinitiali:

; 441  : 	}
; 442  : 	if (aWindowProps)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Deinitiali

; 443  : 	{
; 444  : 		delete aAurora; // <----- delete the pointer NOT the struct

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@Deinitiali
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GA2D@@QAEPAXI@Z
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN8@Deinitiali
$LN7@Deinitiali:
	mov	DWORD PTR tv80[ebp], 0
$LN8@Deinitiali:

; 445  : 		aAurora = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@Deinitiali:

; 446  : 	}
; 447  : 
; 448  : 	aParentHwnd = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 	aChildHwnd = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 450  : 	// HAVE TO WORK ON DIZ
; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@A2DWindow@@UAEXXZ ENDP			; A2DWindow::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?Initialize@A2DWindow@@UAEJXZ
_TEXT	SEGMENT
_gdiplusToken$ = -56					; size = 4
_gdiplusStartupInput$ = -44				; size = 16
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?Initialize@A2DWindow@@UAEJXZ PROC			; A2DWindow::Initialize, COMDAT
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 
; 404  : 	HRESULT hr;
; 405  : 
; 406  : 	GdiplusStartupInput gdiplusStartupInput;

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _gdiplusStartupInput$[ebp]
	call	??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput

; 407  : 	ULONG_PTR           gdiplusToken;
; 408  : 
; 409  : 	GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

	push	0
	lea	eax, DWORD PTR _gdiplusStartupInput$[ebp]
	push	eax
	lea	ecx, DWORD PTR _gdiplusToken$[ebp]
	push	ecx
	call	_GdiplusStartup@12

; 410  : 
; 411  : 	aWindowProps->aWindowTitle = L"WindowTestTitle";

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+52], OFFSET ??_C@_1CA@JICPPMBM@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@

; 412  : 	aWindowProps->aWindowClass = L"WindowTestClass";

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+56], OFFSET ??_C@_1CA@LFCPLEGJ@?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAT?$AAe?$AAs?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@

; 413  : 	aWindowProps->aWindow = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 414  : 
; 415  : 	RegisterClass(aParentHwnd);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z ; A2DWindow::RegisterClassW

; 416  : 	RegisterClass(aChildHwnd);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterClassW@A2DWindow@@AAEGPAUHWND__@@@Z ; A2DWindow::RegisterClassW

; 417  : 	
; 418  : 	hr = CreateHandle(aParentHwnd);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z ; A2DWindow::CreateHandle
	mov	DWORD PTR _hr$[ebp], eax

; 419  : 
; 420  : 	if (FAILED(hr))	return hr;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@Initialize
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:

; 421  : 
; 422  : 	hr = CreateHandle(aChildHwnd);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateHandle@A2DWindow@@AAEJAAPAUHWND__@@@Z ; A2DWindow::CreateHandle
	mov	DWORD PTR _hr$[ebp], eax

; 423  : 
; 424  : 	if (FAILED(hr))	return hr;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Initialize
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@Initialize
$LN2@Initialize:

; 425  : 
; 426  : 	CreateComponentResources();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateComponentResources@A2DWindow@@AAEJXZ ; A2DWindow::CreateComponentResources

; 427  : 
; 428  : 	if (FAILED(hr))	return hr;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Initialize
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@Initialize
$LN1@Initialize:

; 429  : 
; 430  : 	Update();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@A2DWindow@@AAEXXZ		; A2DWindow::Update

; 431  : 
; 432  : 	return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN4@Initialize:

; 433  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@Initialize:
	DD	2
	DD	$LN8@Initialize
$LN8@Initialize:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN6@Initialize
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@Initialize
$LN7@Initialize:
	DB	103					; 00000067H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN6@Initialize:
	DB	103					; 00000067H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?Initialize@A2DWindow@@UAEJXZ ENDP			; A2DWindow::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetVisible@A2DWindow@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xVisible$ = 8						; size = 1
?SetVisible@A2DWindow@@QAEX_N@Z PROC			; A2DWindow::SetVisible, COMDAT
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 
; 258  : 	if(xVisible)

	movzx	eax, BYTE PTR _xVisible$[ebp]
	test	eax, eax
	je	SHORT $LN2@SetVisible

; 259  : 	{
; 260  : 		// Create resources!
; 261  : 		aAurora->CreateResources();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?CreateResources@A2D@@QAEJXZ		; A2D::CreateResources

; 262  : 
; 263  : 		ShowWindow(aChildHwnd, SW_SHOWNORMAL);

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  : 		ShowWindow(aParentHwnd, SW_SHOWNORMAL);

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : 		aOptionVisible = xVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _xVisible$[ebp]
	mov	BYTE PTR [eax+28], cl

; 266  : 		RunMessageLoop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunMessageLoop@A2DWindow@@AAEXXZ	; A2DWindow::RunMessageLoop

; 267  : 	}
; 268  : 	else

	jmp	SHORT $LN3@SetVisible
$LN2@SetVisible:

; 269  : 	{
; 270  : 		ShowWindow(aChildHwnd, SW_HIDE);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 271  : 		ShowWindow(aParentHwnd, SW_HIDE);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  : 		aOptionVisible = xVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _xVisible$[ebp]
	mov	BYTE PTR [eax+28], cl
$LN3@SetVisible:

; 273  : 	}
; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVisible@A2DWindow@@QAEX_N@Z ENDP			; A2DWindow::SetVisible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetTitle@A2DWindow@@QAEXPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xTitleName$ = 8					; size = 4
?SetTitle@A2DWindow@@QAEXPB_W@Z PROC			; A2DWindow::SetTitle, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 	SetWindowText(aChildHwnd, xTitleName);

	mov	esi, esp
	mov	eax, DWORD PTR _xTitleName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__SetWindowTextW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 122  : 	SetWindowText(aParentHwnd, xTitleName);

	mov	esi, esp
	mov	eax, DWORD PTR _xTitleName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SetWindowTextW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTitle@A2DWindow@@QAEXPB_W@Z ENDP			; A2DWindow::SetTitle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetPositionAndSize@A2DWindow@@QAEXHHHH@Z
_TEXT	SEGMENT
_hdwp$ = -20						; size = 4
_this$ = -8						; size = 4
_xLeft$ = 8						; size = 4
_xTop$ = 12						; size = 4
_xWidth$ = 16						; size = 4
_xHeight$ = 20						; size = 4
?SetPositionAndSize@A2DWindow@@QAEXHHHH@Z PROC		; A2DWindow::SetPositionAndSize, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	HDWP hdwp;
; 102  : 	hdwp = BeginDeferWindowPos(2);

	mov	esi, esp
	push	2
	call	DWORD PTR __imp__BeginDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 103  : 	
; 104  : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN2@SetPositio

; 105  : 	{
; 106  : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, xLeft, xTop, xWidth, xHeight, SWP_NOZORDER | SWP_NOACTIVATE);

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _xHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xTop$[ebp]
	push	edx
	mov	eax, DWORD PTR _xLeft$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 107  : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, xLeft, xTop, xWidth, xHeight, SWP_NOZORDER | SWP_NOACTIVATE);

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _xHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xTop$[ebp]
	push	edx
	mov	eax, DWORD PTR _xLeft$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _hdwp$[ebp]
	push	edx
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax
$LN2@SetPositio:

; 108  : 	}
; 109  : 
; 110  : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN1@SetPositio

; 111  : 	{
; 112  : 		EndDeferWindowPos(hdwp);

	mov	esi, esp
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetPositio:

; 113  : 	}
; 114  : 
; 115  : 	// Redraw
; 116  : 	Update();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@A2DWindow@@AAEXXZ		; A2DWindow::Update

; 117  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetPositionAndSize@A2DWindow@@QAEXHHHH@Z ENDP		; A2DWindow::SetPositionAndSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetSize@A2DWindow@@QAEXHH@Z
_TEXT	SEGMENT
_hdwp$ = -20						; size = 4
_this$ = -8						; size = 4
_xWidth$ = 8						; size = 4
_xHeight$ = 12						; size = 4
?SetSize@A2DWindow@@QAEXHH@Z PROC			; A2DWindow::SetSize, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	HDWP hdwp;
; 82   : 	hdwp = BeginDeferWindowPos(2);

	mov	esi, esp
	push	2
	call	DWORD PTR __imp__BeginDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 83   : 	
; 84   : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN2@SetSize

; 85   : 	{
; 86   : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, 0, 0, xWidth, xHeight, SWP_NOZORDER | SWP_NOMOVE | SWP_NOACTIVATE);

	mov	esi, esp
	push	22					; 00000016H
	mov	eax, DWORD PTR _xHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xWidth$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _hdwp$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 87   : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, 0, 0, xWidth, xHeight, SWP_NOZORDER | SWP_NOMOVE | SWP_NOACTIVATE);

	mov	esi, esp
	push	22					; 00000016H
	mov	eax, DWORD PTR _xHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xWidth$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax
$LN2@SetSize:

; 88   : 	}
; 89   : 
; 90   : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN1@SetSize

; 91   : 	{
; 92   : 		EndDeferWindowPos(hdwp);

	mov	esi, esp
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetSize:

; 93   : 	}
; 94   : 
; 95   : 	// Redraw
; 96   : 	Update();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@A2DWindow@@AAEXXZ		; A2DWindow::Update

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSize@A2DWindow@@QAEXHH@Z ENDP			; A2DWindow::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetPosition@A2DWindow@@QAEXHH@Z
_TEXT	SEGMENT
_hdwp$ = -20						; size = 4
_this$ = -8						; size = 4
_xLeft$ = 8						; size = 4
_xTop$ = 12						; size = 4
?SetPosition@A2DWindow@@QAEXHH@Z PROC			; A2DWindow::SetPosition, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	HDWP hdwp;
; 63   : 	hdwp = BeginDeferWindowPos(2);

	mov	esi, esp
	push	2
	call	DWORD PTR __imp__BeginDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 64   : 	
; 65   : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN2@SetPositio

; 66   : 	{
; 67   : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, xLeft, xTop, 0, 0, SWP_NOZORDER | SWP_NOSIZE | SWP_NOACTIVATE);

	mov	esi, esp
	push	21					; 00000015H
	push	0
	push	0
	mov	eax, DWORD PTR _xTop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xLeft$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _hdwp$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax

; 68   : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, xLeft, xTop, 0, 0, SWP_NOZORDER | SWP_NOSIZE | SWP_NOACTIVATE);

	mov	esi, esp
	push	21					; 00000015H
	push	0
	push	0
	mov	eax, DWORD PTR _xTop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__DeferWindowPos@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdwp$[ebp], eax
$LN2@SetPositio:

; 69   : 	}
; 70   : 
; 71   : 	if (hdwp)

	cmp	DWORD PTR _hdwp$[ebp], 0
	je	SHORT $LN3@SetPositio

; 72   : 	{
; 73   : 		EndDeferWindowPos(hdwp);

	mov	esi, esp
	mov	eax, DWORD PTR _hdwp$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDeferWindowPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@SetPositio:

; 74   : 	}
; 75   : 
; 76   : 	// No need to redraw since you are just moving.
; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPosition@A2DWindow@@QAEXHH@Z ENDP			; A2DWindow::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetShadow@A2DWindow@@QAEX_N@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_xShadowFlag$ = 8					; size = 1
?SetShadow@A2DWindow@@QAEX_N@Z PROC			; A2DWindow::SetShadow, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	if (!aOptionDecorated)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN1@SetShadow

; 50   : 	{
; 51   : 		SetUndecorated(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetUndecorated@A2DWindow@@QAEX_N@Z	; A2DWindow::SetUndecorated
$LN1@SetShadow:

; 52   : 	}
; 53   : 		
; 54   : 	aOptionShadow = xShadowFlag ? 1 : 0;

	movzx	eax, BYTE PTR _xShadowFlag$[ebp]
	test	eax, eax
	je	SHORT $LN4@SetShadow
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN5@SetShadow
$LN4@SetShadow:
	mov	DWORD PTR tv71[ebp], 0
$LN5@SetShadow:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [ecx+20], edx

; 55   : 
; 56   : 	RenderComponent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderComponent@A2DWindow@@AAEXXZ	; A2DWindow::RenderComponent

; 57   : 
; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetShadow@A2DWindow@@QAEX_N@Z ENDP			; A2DWindow::SetShadow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetWindowPadding@A2DWindow@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xPad$ = 8						; size = 4
?SetWindowPadding@A2DWindow@@QAEXH@Z PROC		; A2DWindow::SetWindowPadding, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	// Default values will be used. They are defined in SampleWindow resources.
; 38   : 	// The final goal is to render this using pure GDI+ and cache it and reuse it during resize. 
; 39   : 	// So that way, you can actually set a windowPadding!
; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowPadding@A2DWindow@@QAEXH@Z ENDP		; A2DWindow::SetWindowPadding
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetUndecorated@A2DWindow@@QAEX_N@Z
_TEXT	SEGMENT
tv82 = -232						; size = 4
tv78 = -232						; size = 4
tv74 = -232						; size = 4
_lExStyle$ = -32					; size = 4
_lStyle$ = -20						; size = 4
_this$ = -8						; size = 4
_xUndecoratedFlag$ = 8					; size = 1
?SetUndecorated@A2DWindow@@QAEX_N@Z PROC		; A2DWindow::SetUndecorated, COMDAT
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 12   : 	// we cannot just use WS_POPUP style
; 13   :     // WS_THICKFRAME: without this the window cannot be resized and so aero snap, de-maximizing and minimizing won't work
; 14   :     // WS_SYSMENU: enables the context menu with the move, close, maximize, minize... commands (shift + right-click on the task bar item)
; 15   :     // HOWEVER, this also enables the menu with the maximize buttons in the title bar, which will exist inside your client area and are clickable. 
; 16   :     // WS_CAPTION: enables aero minimize animation/transition
; 17   :     // WS_MAXIMIZEBOX, WS_MINIMIZEBOX: enable minimize/maximize
; 18   : 
; 19   : 	LONG lStyle, lExStyle;
; 20   : 
; 21   : 	lStyle = GetWindowLongPtr(aParentHwnd, GWL_STYLE);

	mov	esi, esp
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lStyle$[ebp], eax

; 22   : 	lExStyle = GetWindowLongPtr(aParentHwnd, GWL_EXSTYLE);

	mov	esi, esp
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lExStyle$[ebp], eax

; 23   : 
; 24   : 	lStyle &= xUndecoratedFlag ? ~(WS_CAPTION | WS_THICKFRAME | WS_MINIMIZE | WS_MAXIMIZE | WS_SYSMENU) : (WS_CAPTION | WS_THICKFRAME | WS_MINIMIZE | WS_MAXIMIZE | WS_SYSMENU);

	movzx	eax, BYTE PTR _xUndecoratedFlag$[ebp]
	test	eax, eax
	je	SHORT $LN3@SetUndecor
	mov	DWORD PTR tv74[ebp], -567017473		; de33ffffH
	jmp	SHORT $LN4@SetUndecor
$LN3@SetUndecor:
	mov	DWORD PTR tv74[ebp], 567017472		; 21cc0000H
$LN4@SetUndecor:
	mov	ecx, DWORD PTR _lStyle$[ebp]
	and	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _lStyle$[ebp], ecx

; 25   : 	lStyle |= xUndecoratedFlag ? (WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_POPUP) : 0;

	movzx	eax, BYTE PTR _xUndecoratedFlag$[ebp]
	test	eax, eax
	je	SHORT $LN5@SetUndecor
	mov	DWORD PTR tv78[ebp], -2046820352	; 86000000H
	jmp	SHORT $LN6@SetUndecor
$LN5@SetUndecor:
	mov	DWORD PTR tv78[ebp], 0
$LN6@SetUndecor:
	mov	ecx, DWORD PTR _lStyle$[ebp]
	or	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _lStyle$[ebp], ecx

; 26   : 	lExStyle |= xUndecoratedFlag ? (WS_EX_LAYERED | WS_EX_APPWINDOW) : WS_EX_LAYERED;

	movzx	eax, BYTE PTR _xUndecoratedFlag$[ebp]
	test	eax, eax
	je	SHORT $LN7@SetUndecor
	mov	DWORD PTR tv82[ebp], 786432		; 000c0000H
	jmp	SHORT $LN8@SetUndecor
$LN7@SetUndecor:
	mov	DWORD PTR tv82[ebp], 524288		; 00080000H
$LN8@SetUndecor:
	mov	ecx, DWORD PTR _lExStyle$[ebp]
	or	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _lExStyle$[ebp], ecx

; 27   : 
; 28   : 	SetWindowLongPtr(aParentHwnd, GWL_STYLE, lStyle);

	mov	esi, esp
	mov	eax, DWORD PTR _lStyle$[ebp]
	push	eax
	push	-16					; fffffff0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 29   : 	SetWindowLongPtr(aParentHwnd, GWL_EXSTYLE, lExStyle);

	mov	esi, esp
	mov	eax, DWORD PTR _lExStyle$[ebp]
	push	eax
	push	-20					; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 
; 31   : 	//SetWindowPos(aParentWin->aHwnd, HWND_TOP, aWindowProps->aRealLeft, aWindowProps->aRealTop, aWindowProps->aRealWidth, aWindowProps->aRealHeight, SWP_FRAMECHANGED);
; 32   : 	SetWindowPos(aParentHwnd, NULL, 0, 0, 0, 0, SWP_FRAMECHANGED | SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_NOOWNERZORDER);

	mov	esi, esp
	push	551					; 00000227H
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 33   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUndecorated@A2DWindow@@QAEX_N@Z ENDP		; A2DWindow::SetUndecorated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?SetAurora2D@A2DWindow@@QAEXPAVA2D@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xAurora$ = 8						; size = 4
?SetAurora2D@A2DWindow@@QAEXPAVA2D@@@Z PROC		; A2DWindow::SetAurora2D, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	aAurora = xAurora;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xAurora$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 253  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAurora2D@A2DWindow@@QAEXPAVA2D@@@Z ENDP		; A2DWindow::SetAurora2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ?GetChildHwnd@A2DWindow@@QAEPAPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetChildHwnd@A2DWindow@@QAEPAPAUHWND__@@XZ PROC	; A2DWindow::GetChildHwnd, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	return &aChildHwnd;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 45   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetChildHwnd@A2DWindow@@QAEPAPAUHWND__@@XZ ENDP	; A2DWindow::GetChildHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ??1A2DWindow@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1A2DWindow@@QAE@XZ PROC				; A2DWindow::~A2DWindow, COMDAT
; _this$ = ecx

; 8    : A2DWindow::~A2DWindow(){}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7A2DWindow@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1A2DAbstract@@QAE@XZ			; A2DAbstract::~A2DAbstract
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1A2DWindow@@QAE@XZ ENDP				; A2DWindow::~A2DWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mathew\dropbox\muzzler\windows-sync\muzzlersync\libs\aurora sdk\lib\source\a2dwindow.cpp
;	COMDAT ??0A2DWindow@@QAE@PAUA2DWindowProperties@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xWinProps$ = 8						; size = 4
??0A2DWindow@@QAE@PAUA2DWindowProperties@@@Z PROC	; A2DWindow::A2DWindow, COMDAT
; _this$ = ecx

; 6    : aWindowProps(xWinProps){}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0A2DAbstract@@QAE@XZ			; A2DAbstract::A2DAbstract
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7A2DWindow@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xWinProps$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7    : 
; 8    : A2DWindow::~A2DWindow(){}
; 9    : 
; 10   : void A2DWindow::SetUndecorated(bool xUndecoratedFlag)
; 11   : {
; 12   : 	// we cannot just use WS_POPUP style
; 13   :     // WS_THICKFRAME: without this the window cannot be resized and so aero snap, de-maximizing and minimizing won't work
; 14   :     // WS_SYSMENU: enables the context menu with the move, close, maximize, minize... commands (shift + right-click on the task bar item)
; 15   :     // HOWEVER, this also enables the menu with the maximize buttons in the title bar, which will exist inside your client area and are clickable. 
; 16   :     // WS_CAPTION: enables aero minimize animation/transition
; 17   :     // WS_MAXIMIZEBOX, WS_MINIMIZEBOX: enable minimize/maximize
; 18   : 
; 19   : 	LONG lStyle, lExStyle;
; 20   : 
; 21   : 	lStyle = GetWindowLongPtr(aParentHwnd, GWL_STYLE);
; 22   : 	lExStyle = GetWindowLongPtr(aParentHwnd, GWL_EXSTYLE);
; 23   : 
; 24   : 	lStyle &= xUndecoratedFlag ? ~(WS_CAPTION | WS_THICKFRAME | WS_MINIMIZE | WS_MAXIMIZE | WS_SYSMENU) : (WS_CAPTION | WS_THICKFRAME | WS_MINIMIZE | WS_MAXIMIZE | WS_SYSMENU);
; 25   : 	lStyle |= xUndecoratedFlag ? (WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_POPUP) : 0;
; 26   : 	lExStyle |= xUndecoratedFlag ? (WS_EX_LAYERED | WS_EX_APPWINDOW) : WS_EX_LAYERED;
; 27   : 
; 28   : 	SetWindowLongPtr(aParentHwnd, GWL_STYLE, lStyle);
; 29   : 	SetWindowLongPtr(aParentHwnd, GWL_EXSTYLE, lExStyle);
; 30   : 
; 31   : 	//SetWindowPos(aParentWin->aHwnd, HWND_TOP, aWindowProps->aRealLeft, aWindowProps->aRealTop, aWindowProps->aRealWidth, aWindowProps->aRealHeight, SWP_FRAMECHANGED);
; 32   : 	SetWindowPos(aParentHwnd, NULL, 0, 0, 0, 0, SWP_FRAMECHANGED | SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_NOOWNERZORDER);
; 33   : }
; 34   : 
; 35   : void A2DWindow::SetWindowPadding(int xPad)
; 36   : {
; 37   : 	// Default values will be used. They are defined in SampleWindow resources.
; 38   : 	// The final goal is to render this using pure GDI+ and cache it and reuse it during resize. 
; 39   : 	// So that way, you can actually set a windowPadding!
; 40   : }
; 41   : 
; 42   : HWND* A2DWindow::GetChildHwnd()
; 43   : {
; 44   : 	return &aChildHwnd;
; 45   : }
; 46   : 
; 47   : void A2DWindow::SetShadow(bool xShadowFlag)
; 48   : {
; 49   : 	if (!aOptionDecorated)
; 50   : 	{
; 51   : 		SetUndecorated(true);
; 52   : 	}
; 53   : 		
; 54   : 	aOptionShadow = xShadowFlag ? 1 : 0;
; 55   : 
; 56   : 	RenderComponent();
; 57   : 
; 58   : }
; 59   : 
; 60   : void A2DWindow::SetPosition(int xLeft, int xTop)
; 61   : {
; 62   : 	HDWP hdwp;
; 63   : 	hdwp = BeginDeferWindowPos(2);
; 64   : 	
; 65   : 	if (hdwp)
; 66   : 	{
; 67   : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, xLeft, xTop, 0, 0, SWP_NOZORDER | SWP_NOSIZE | SWP_NOACTIVATE);
; 68   : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, xLeft, xTop, 0, 0, SWP_NOZORDER | SWP_NOSIZE | SWP_NOACTIVATE);
; 69   : 	}
; 70   : 
; 71   : 	if (hdwp)
; 72   : 	{
; 73   : 		EndDeferWindowPos(hdwp);
; 74   : 	}
; 75   : 
; 76   : 	// No need to redraw since you are just moving.
; 77   : }
; 78   : 
; 79   : void A2DWindow::SetSize(int xWidth, int xHeight)
; 80   : {
; 81   : 	HDWP hdwp;
; 82   : 	hdwp = BeginDeferWindowPos(2);
; 83   : 	
; 84   : 	if (hdwp)
; 85   : 	{
; 86   : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, 0, 0, xWidth, xHeight, SWP_NOZORDER | SWP_NOMOVE | SWP_NOACTIVATE);
; 87   : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, 0, 0, xWidth, xHeight, SWP_NOZORDER | SWP_NOMOVE | SWP_NOACTIVATE);
; 88   : 	}
; 89   : 
; 90   : 	if (hdwp)
; 91   : 	{
; 92   : 		EndDeferWindowPos(hdwp);
; 93   : 	}
; 94   : 
; 95   : 	// Redraw
; 96   : 	Update();
; 97   : }
; 98   : 
; 99   : void A2DWindow::SetPositionAndSize(int xLeft, int xTop, int xWidth, int xHeight)
; 100  : {
; 101  : 	HDWP hdwp;
; 102  : 	hdwp = BeginDeferWindowPos(2);
; 103  : 	
; 104  : 	if (hdwp)
; 105  : 	{
; 106  : 		hdwp = DeferWindowPos(hdwp, aParentHwnd, NULL, xLeft, xTop, xWidth, xHeight, SWP_NOZORDER | SWP_NOACTIVATE);
; 107  : 		hdwp = DeferWindowPos(hdwp, aChildHwnd, aParentHwnd, xLeft, xTop, xWidth, xHeight, SWP_NOZORDER | SWP_NOACTIVATE);
; 108  : 	}
; 109  : 
; 110  : 	if (hdwp)
; 111  : 	{
; 112  : 		EndDeferWindowPos(hdwp);
; 113  : 	}
; 114  : 
; 115  : 	// Redraw
; 116  : 	Update();
; 117  : }
; 118  : 
; 119  : void A2DWindow::SetTitle(LPCWSTR xTitleName)
; 120  : {
; 121  : 	SetWindowText(aChildHwnd, xTitleName);
; 122  : 	SetWindowText(aParentHwnd, xTitleName);
; 123  : }
; 124  : 
; 125  : ATOM A2DWindow::RegisterClass(HWND xHwnd)
; 126  : {
; 127  : 	WNDCLASSEX wcex = { sizeof(WNDCLASSEX) };
; 128  : 	wcex.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
; 129  : 	wcex.lpfnWndProc = A2DWindow::WndProc;
; 130  : 	wcex.cbClsExtra = 0;
; 131  : 	wcex.cbWndExtra = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 1

; 132  : 	wcex.hInstance = *aWindowProps->aHInstance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 1

; 133  : 	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
; 134  : 	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 6    : aWindowProps(xWinProps){}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0A2DWindow@@QAE@PAUA2DWindowProperties@@@Z ENDP	; A2DWindow::A2DWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GA2D@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GA2D@@QAEPAXI@Z PROC					; A2D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1A2D@@QAE@XZ				; A2D::~A2D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GA2D@@QAEPAXI@Z ENDP					; A2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GA2DWindowProperties@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GA2DWindowProperties@@QAEPAXI@Z PROC			; A2DWindowProperties::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1A2DWindowProperties@@QAE@XZ		; A2DWindowProperties::~A2DWindowProperties
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GA2DWindowProperties@@QAEPAXI@Z ENDP			; A2DWindowProperties::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC ; Gdiplus::Graphics::SetStatus, COMDAT
; _this$ = ecx

; 2399 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2400 :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 2401 :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 2402 :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 2403 :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 2404 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::Graphics::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_graphics$ = 8						; size = 4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z PROC ; Gdiplus::Graphics::SetNativeGraphics, COMDAT
; _this$ = ecx

; 2394 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2395 :         this->nativeGraphics = graphics;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _graphics$[ebp]
	mov	DWORD PTR [eax], ecx

; 2396 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ENDP ; Gdiplus::Graphics::SetNativeGraphics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
_image$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z PROC ; Gdiplus::Graphics::DrawImage, COMDAT
; _this$ = ecx

; 1532 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1533 :         return SetStatus(DllExports::GdipDrawImageRect(nativeGraphics,
; 1534 :                                                        image ? image->nativeImage
; 1535 :                                                              : NULL,
; 1536 :                                                        x,
; 1537 :                                                        y,
; 1538 :                                                        width,
; 1539 :                                                        height));

	cmp	DWORD PTR _image$[ebp], 0
	je	SHORT $LN3@DrawImage
	mov	eax, DWORD PTR _image$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@DrawImage
$LN3@DrawImage:
	mov	DWORD PTR tv73[ebp], 0
$LN4@DrawImage:
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GdipDrawImageRect@24
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1540 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawImage@Graphics@Gdiplus@@QAE?AW4Status@2@PAVImage@2@MMMM@Z ENDP ; Gdiplus::Graphics::DrawImage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_brush$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z PROC ; Gdiplus::Graphics::FillRectangle, COMDAT
; _this$ = ecx

; 965  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 966  :         return SetStatus(DllExports::GdipFillRectangle(nativeGraphics,
; 967  :                                                        brush->nativeBrush, x, y,
; 968  :                                                        width, height));

	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _brush$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_GdipFillRectangle@24
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 969  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ENDP ; Gdiplus::Graphics::FillRectangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_color$ = 8						; size = 4
?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z PROC ; Gdiplus::Graphics::Clear, COMDAT
; _this$ = ecx

; 948  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 949  :         return SetStatus(DllExports::GdipGraphicsClear(
; 950  :             nativeGraphics,
; 951  :             color.GetValue()));

	mov	ecx, DWORD PTR _color$[ebp]
	call	?GetValue@Color@Gdiplus@@QBEKXZ		; Gdiplus::Color::GetValue
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GdipGraphicsClear@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 952  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ENDP ; Gdiplus::Graphics::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pen$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z PROC ; Gdiplus::Graphics::DrawRectangle, COMDAT
; _this$ = ecx

; 650  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 651  :         return SetStatus(DllExports::GdipDrawRectangle(nativeGraphics,
; 652  :                                                        pen->nativePen, x, y,
; 653  :                                                        width, height));

	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pen$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_GdipDrawRectangle@24
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 654  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@MMMM@Z ENDP ; Gdiplus::Graphics::DrawRectangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?GetHDC@Graphics@Gdiplus@@QAEPAUHDC__@@XZ
_TEXT	SEGMENT
_hdc$ = -20						; size = 4
_this$ = -8						; size = 4
?GetHDC@Graphics@Gdiplus@@QAEPAUHDC__@@XZ PROC		; Gdiplus::Graphics::GetHDC, COMDAT
; _this$ = ecx

; 123  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  :         HDC     hdc = NULL;

	mov	DWORD PTR _hdc$[ebp], 0

; 125  : 
; 126  :         SetStatus(DllExports::GdipGetDC(nativeGraphics, &hdc));

	lea	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_GdipGetDC@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 127  : 
; 128  :         return hdc;

	mov	eax, DWORD PTR _hdc$[ebp]

; 129  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetHDC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@GetHDC:
	DD	1
	DD	$LN4@GetHDC
$LN4@GetHDC:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@GetHDC
$LN3@GetHDC:
	DB	104					; 00000068H
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	0
?GetHDC@Graphics@Gdiplus@@QAEPAUHDC__@@XZ ENDP		; Gdiplus::Graphics::GetHDC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z
_TEXT	SEGMENT
_graphics$ = -20					; size = 4
_this$ = -8						; size = 4
_hdc$ = 8						; size = 4
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z PROC		; Gdiplus::Graphics::Graphics, COMDAT
; _this$ = ecx

; 58   :     Graphics(IN HDC hdc)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   :     {
; 60   :         GpGraphics *graphics = NULL;

	mov	DWORD PTR _graphics$[ebp], 0

; 61   : 
; 62   :         lastResult = DllExports::GdipCreateFromHDC(hdc, &graphics);

	lea	eax, DWORD PTR _graphics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	_GdipCreateFromHDC@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 63   : 
; 64   :         SetNativeGraphics(graphics);

	mov	eax, DWORD PTR _graphics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics

; 65   :     }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Graphics
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@Graphics:
	DD	1
	DD	$LN4@Graphics
$LN4@Graphics:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@Graphics
$LN3@Graphics:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z ENDP		; Gdiplus::Graphics::Graphics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ??1Pen@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Pen@Gdiplus@@QAE@XZ PROC				; Gdiplus::Pen::~Pen, COMDAT
; _this$ = ecx

; 51   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :         DllExports::GdipDeletePen(nativePen);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_GdipDeletePen@4

; 53   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Pen@Gdiplus@@QAE@XZ ENDP				; Gdiplus::Pen::~Pen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z
_TEXT	SEGMENT
_unit$ = -20						; size = 4
_this$ = -8						; size = 4
_color$ = 8						; size = 4
_width$ = 12						; size = 4
??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z PROC			; Gdiplus::Pen::Pen, COMDAT
; _this$ = ecx

; 32   :     Pen(IN const Color& color, 

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   :         IN REAL width = 1.0f)
; 34   :     {
; 35   :         Unit unit = UnitWorld;

	mov	DWORD PTR _unit$[ebp], 0

; 36   :         nativePen = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 37   :         lastResult = DllExports::GdipCreatePen1(color.GetValue(),
; 38   :                                     width, unit, &nativePen);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unit$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _color$[ebp]
	call	?GetValue@Color@Gdiplus@@QBEKXZ		; Gdiplus::Color::GetValue
	push	eax
	call	_GdipCreatePen1@16
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 39   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z ENDP			; Gdiplus::Pen::Pen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTextureBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTextureBrush@Gdiplus@@UAEPAXI@Z PROC		; Gdiplus::TextureBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextureBrush@Gdiplus@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextureBrush@Gdiplus@@UAEPAXI@Z ENDP		; Gdiplus::TextureBrush::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1TextureBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TextureBrush@Gdiplus@@UAE@XZ PROC			; Gdiplus::TextureBrush::~TextureBrush, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Brush@Gdiplus@@UAE@XZ		; Gdiplus::Brush::~Brush
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TextureBrush@Gdiplus@@UAE@XZ ENDP			; Gdiplus::TextureBrush::~TextureBrush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
_order$ = 16						; size = 4
?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z PROC ; Gdiplus::TextureBrush::TranslateTransform, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         return SetStatus(DllExports::GdipTranslateTextureTransform((GpTexture*)nativeBrush,
; 336  :                                                                dx, dy, order));

	mov	eax, DWORD PTR _order$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_GdipTranslateTextureTransform@16
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus

; 337  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?TranslateTransform@TextureBrush@Gdiplus@@QAE?AW4Status@2@MMW4MatrixOrder@2@@Z ENDP ; Gdiplus::TextureBrush::TranslateTransform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z
_TEXT	SEGMENT
_texture$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_image$ = 8						; size = 4
_wrapMode$ = 12						; size = 4
??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z PROC ; Gdiplus::TextureBrush::TextureBrush, COMDAT
; _this$ = ecx

; 169  :     TextureBrush(IN Image* image, 

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Brush@Gdiplus@@IAE@XZ		; Gdiplus::Brush::Brush
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TextureBrush@Gdiplus@@6B@

; 170  :                  IN WrapMode wrapMode = WrapModeTile)
; 171  :     {
; 172  :         GpTexture *texture = NULL;

	mov	DWORD PTR _texture$[ebp], 0

; 173  : 
; 174  :         lastResult = DllExports::GdipCreateTexture(
; 175  :                                                   image->nativeImage,
; 176  :                                                   wrapMode, &texture);

	lea	eax, DWORD PTR _texture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wrapMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_GdipCreateTexture@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 177  : 
; 178  :         SetNativeBrush(texture);

	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush

; 179  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@TextureBru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@TextureBru:
	DD	1
	DD	$LN6@TextureBru
$LN6@TextureBru:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@TextureBru
$LN4@TextureBru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Brush@Gdiplus@@UAE@XZ		; Gdiplus::Brush::~Brush
__ehhandler$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TextureBrush@Gdiplus@@QAE@PAVImage@1@W4WrapMode@1@@Z ENDP ; Gdiplus::TextureBrush::TextureBrush
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GBrush@Gdiplus@@UAEPAXI@Z PROC			; Gdiplus::Brush::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Brush@Gdiplus@@UAE@XZ		; Gdiplus::Brush::~Brush
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBrush@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Brush::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC	; Gdiplus::Brush::SetStatus, COMDAT
; _this$ = ecx

; 97   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 99   :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 100  :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 101  :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 102  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Brush::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nativeBrush$ = 8					; size = 4
?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z PROC	; Gdiplus::Brush::SetNativeBrush, COMDAT
; _this$ = ecx

; 92   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   :         this->nativeBrush = nativeBrush;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeBrush$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 94   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ENDP	; Gdiplus::Brush::SetNativeBrush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nativeBrush$ = 8					; size = 4
_status$ = 12						; size = 4
??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z PROC	; Gdiplus::Brush::Brush, COMDAT
; _this$ = ecx

; 85   :     Brush(GpBrush* nativeBrush, Status status)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 86   :     {
; 87   :         lastResult = status;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 88   :         SetNativeBrush(nativeBrush);

	mov	eax, DWORD PTR _nativeBrush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush

; 89   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ENDP	; Gdiplus::Brush::Brush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0Brush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Brush@Gdiplus@@IAE@XZ PROC				; Gdiplus::Brush::Brush, COMDAT
; _this$ = ecx

; 75   :     Brush()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 76   :     {
; 77   :         SetStatus(NotImplemented);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus

; 78   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Brush@Gdiplus@@IAE@XZ ENDP				; Gdiplus::Brush::Brush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?Clone@Brush@Gdiplus@@UBEPAV12@XZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_newBrush$ = -44					; size = 4
_brush$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Brush@Gdiplus@@UBEPAV12@XZ PROC			; Gdiplus::Brush::Clone, COMDAT
; _this$ = ecx

; 41   :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@Brush@Gdiplus@@UBEPAV12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 42   :         GpBrush *brush = NULL;

	mov	DWORD PTR _brush$[ebp], 0

; 43   : 
; 44   :         SetStatus(DllExports::GdipCloneBrush(nativeBrush, &brush));

	lea	eax, DWORD PTR _brush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_GdipCloneBrush@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus

; 45   : 
; 46   :         Brush *newBrush = new Brush(brush, lastResult);

	push	12					; 0000000cH
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@Clone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _brush$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ; Gdiplus::Brush::Brush
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Clone
$LN4@Clone:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Clone:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _newBrush$[ebp], ecx

; 47   :         
; 48   :         if (newBrush == NULL) 

	cmp	DWORD PTR _newBrush$[ebp], 0
	jne	SHORT $LN1@Clone

; 49   :         {
; 50   :             DllExports::GdipDeleteBrush(brush);

	mov	eax, DWORD PTR _brush$[ebp]
	push	eax
	call	_GdipDeleteBrush@4
$LN1@Clone:

; 51   :         }
; 52   : 
; 53   :         return newBrush;

	mov	eax, DWORD PTR _newBrush$[ebp]

; 54   :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Clone
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Clone:
	DD	1
	DD	$LN9@Clone
$LN9@Clone:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@Clone
$LN7@Clone:
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Brush@Gdiplus@@UBEPAV12@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@Brush@Gdiplus@@UBEPAV12@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@Brush@Gdiplus@@UBEPAV12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@Brush@Gdiplus@@UBEPAV12@XZ ENDP			; Gdiplus::Brush::Clone
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??1Brush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Brush@Gdiplus@@UAE@XZ PROC				; Gdiplus::Brush::~Brush, COMDAT
; _this$ = ecx

; 36   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 37   :         DllExports::GdipDeleteBrush(nativeBrush);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_GdipDeleteBrush@4

; 38   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Brush@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Brush::~Brush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImage@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GImage@Gdiplus@@UAEPAXI@Z PROC			; Gdiplus::Image::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GImage@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Image::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusheaders.h
;	COMDAT ?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC	; Gdiplus::Image::SetStatus, COMDAT
; _this$ = ecx

; 485  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 486  :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 487  :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 488  :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 489  :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 490  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Image::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nativeImage$ = 8					; size = 4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z PROC	; Gdiplus::Image::SetNativeImage, COMDAT
; _this$ = ecx

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 538  :     this->nativeImage = nativeImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeImage$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 539  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ENDP	; Gdiplus::Image::SetNativeImage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nativeImage$ = 8					; size = 4
_status$ = 12						; size = 4
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z PROC	; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 530  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Image@Gdiplus@@6B@

; 531  :     SetNativeImage(nativeImage);

	mov	eax, DWORD PTR _nativeImage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage

; 532  :     lastResult = status;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 533  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ENDP	; Gdiplus::Image::Image
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ?Clone@Image@Gdiplus@@UAEPAV12@XZ
_TEXT	SEGMENT
tv80 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_cloneimage$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Image@Gdiplus@@UAEPAV12@XZ PROC			; Gdiplus::Image::Clone, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 104  :     GpImage *cloneimage = NULL;

	mov	DWORD PTR _cloneimage$[ebp], 0

; 105  : 
; 106  :     SetStatus(DllExports::GdipCloneImage(nativeImage, &cloneimage));

	lea	eax, DWORD PTR _cloneimage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_GdipCloneImage@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Image@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Image::SetStatus

; 107  : 
; 108  :     return new Image(cloneimage, lastResult);

	push	16					; 00000010H
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cloneimage$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0Image@Gdiplus@@IAE@PAVGpImage@1@W4Status@1@@Z ; Gdiplus::Image::Image
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv80[ebp], 0
$LN4@Clone:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]

; 109  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Clone
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@Clone:
	DD	1
	DD	$LN8@Clone
$LN8@Clone:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@Clone
$LN6@Clone:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Image@Gdiplus@@UAEPAV12@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@Image@Gdiplus@@UAEPAV12@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@Image@Gdiplus@@UAEPAV12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@Image@Gdiplus@@UAEPAV12@XZ ENDP			; Gdiplus::Image::Clone
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ??1Image@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Image@Gdiplus@@UAE@XZ PROC				; Gdiplus::Image::~Image, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Image@Gdiplus@@6B@

; 98   :     DllExports::GdipDisposeImage(nativeImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_GdipDisposeImage@4

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Image@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Image::~Image
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ??0Image@Gdiplus@@QAE@PB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_filename$ = 8						; size = 4
_useEmbeddedColorManagement$ = 12			; size = 4
??0Image@Gdiplus@@QAE@PB_WH@Z PROC			; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Image@Gdiplus@@6B@

; 31   :     nativeImage = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 32   :     if(useEmbeddedColorManagement)

	cmp	DWORD PTR _useEmbeddedColorManagement$[ebp], 0
	je	SHORT $LN2@Image

; 33   :     {
; 34   :         lastResult = DllExports::GdipLoadImageFromFileICM(
; 35   :             filename, 
; 36   :             &nativeImage
; 37   :         );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_GdipLoadImageFromFileICM@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 38   :     }
; 39   :     else

	jmp	SHORT $LN3@Image
$LN2@Image:

; 40   :     {      
; 41   :         lastResult = DllExports::GdipLoadImageFromFile(
; 42   :             filename, 
; 43   :             &nativeImage
; 44   :         );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_GdipLoadImageFromFile@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@Image:

; 45   :     }
; 46   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Image@Gdiplus@@QAE@PB_WH@Z ENDP			; Gdiplus::Image::Image
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ?MakeARGB@Color@Gdiplus@@SAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?MakeARGB@Color@Gdiplus@@SAKEEEE@Z PROC			; Gdiplus::Color::MakeARGB, COMDAT

; 317  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 318  :         return (((ARGB) (b) <<  BlueShift) |
; 319  :                 ((ARGB) (g) << GreenShift) |
; 320  :                 ((ARGB) (r) <<   RedShift) |
; 321  :                 ((ARGB) (a) << AlphaShift));

	movzx	eax, BYTE PTR _b$[ebp]
	movzx	ecx, BYTE PTR _g$[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _r$[ebp]
	shl	edx, 16					; 00000010H
	or	eax, edx
	movzx	ecx, BYTE PTR _a$[ebp]
	shl	ecx, 24					; 00000018H
	or	eax, ecx

; 322  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeARGB@Color@Gdiplus@@SAKEEEE@Z ENDP			; Gdiplus::Color::MakeARGB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ?GetValue@Color@Gdiplus@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetValue@Color@Gdiplus@@QBEKXZ PROC			; Gdiplus::Color::GetValue, COMDAT
; _this$ = ecx

; 125  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  :         return Argb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 127  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetValue@Color@Gdiplus@@QBEKXZ ENDP			; Gdiplus::Color::GetValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ??0Color@Gdiplus@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_argb$ = 8						; size = 4
??0Color@Gdiplus@@QAE@K@Z PROC				; Gdiplus::Color::Color, COMDAT
; _this$ = ecx

; 79   :     Color(IN ARGB argb)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   :     {
; 81   :         Argb = argb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argb$[ebp]
	mov	DWORD PTR [eax], ecx

; 82   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Color@Gdiplus@@QAE@K@Z ENDP				; Gdiplus::Color::Color
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ??0Color@Gdiplus@@QAE@EEE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_r$ = 8							; size = 1
_g$ = 12						; size = 1
_b$ = 16						; size = 1
??0Color@Gdiplus@@QAE@EEE@Z PROC			; Gdiplus::Color::Color, COMDAT
; _this$ = ecx

; 64   :     Color(IN BYTE r,

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   :           IN BYTE g,
; 66   :           IN BYTE b)
; 67   :     {
; 68   :         Argb = MakeARGB(255, r, g, b);

	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _g$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _r$[ebp]
	push	edx
	push	255					; 000000ffH
	call	?MakeARGB@Color@Gdiplus@@SAKEEEE@Z	; Gdiplus::Color::MakeARGB
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 69   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Color@Gdiplus@@QAE@EEE@Z ENDP			; Gdiplus::Color::Color
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusinit.h
;	COMDAT ??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_debugEventCallback$ = 8				; size = 4
_suppressBackgroundThread$ = 12				; size = 4
_suppressExternalCodecs$ = 16				; size = 4
??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z PROC ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput, COMDAT
; _this$ = ecx

; 51   :     GdiplusStartupInput(

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :         DebugEventProc debugEventCallback = NULL,
; 53   :         BOOL suppressBackgroundThread = FALSE,
; 54   :         BOOL suppressExternalCodecs = FALSE)
; 55   :     {
; 56   :         GdiplusVersion = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 57   :         DebugEventCallback = debugEventCallback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _debugEventCallback$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 58   :         SuppressBackgroundThread = suppressBackgroundThread;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _suppressBackgroundThread$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 59   :         SuppressExternalCodecs = suppressExternalCodecs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _suppressExternalCodecs$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 60   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ENDP ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbase.h
;	COMDAT ??2GdiplusBase@Gdiplus@@SAPAXI@Z
_TEXT	SEGMENT
_in_size$ = 8						; size = 4
??2GdiplusBase@Gdiplus@@SAPAXI@Z PROC			; Gdiplus::GdiplusBase::operator new, COMDAT

; 31   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 32   :        return DllExports::GdipAlloc(in_size);

	mov	eax, DWORD PTR _in_size$[ebp]
	push	eax
	call	_GdipAlloc@4

; 33   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??2GdiplusBase@Gdiplus@@SAPAXI@Z ENDP			; Gdiplus::GdiplusBase::operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbase.h
;	COMDAT ??3GdiplusBase@Gdiplus@@SAXPAX@Z
_TEXT	SEGMENT
_in_pVoid$ = 8						; size = 4
??3GdiplusBase@Gdiplus@@SAXPAX@Z PROC			; Gdiplus::GdiplusBase::operator delete, COMDAT

; 27   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 28   :        DllExports::GdipFree(in_pVoid);

	mov	eax, DWORD PTR _in_pVoid$[ebp]
	push	eax
	call	_GdipFree@4

; 29   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??3GdiplusBase@Gdiplus@@SAXPAX@Z ENDP			; Gdiplus::GdiplusBase::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 614  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 		if (_Syserror_map(_Errval))

	mov	esi, esp
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@default_er

; 616  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 617  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 618  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 619  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 607  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 608  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	esi, esp
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Winerror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Name$[ebp], eax

; 609  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 610  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 602  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 604  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 597  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 598  : 		{	// default constructor
; 599  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 584  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 585  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 586  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 587  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 588  : 			return (_Generic_error_category::message(_Errcode));

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 589  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 579  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 581  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 574  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 575  : 		{	// default constructor
; 576  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 563  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 564  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	esi, esp
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Name$[ebp], eax

; 565  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 566  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 558  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 559  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 560  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 553  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 554  : 		{	// default constructor
; 555  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 352  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 		return (category() == _Right.category()
; 354  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 355  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 337  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 339  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 332  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 334  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 299  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 300  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 246  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 248  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 241  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 243  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 176  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 178  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = -208						; size = 4
_this$ = -8						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 391  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_this$ = -8						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 384  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 386  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 377  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 160  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 154  : 	error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 155  : 		{	// default constructor
; 156  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 652  : 	{	// get system_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 653  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 654  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 642  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 643  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 644  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 545  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 546  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 547  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 548  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2294 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2295 : 		_Xout_of_range("invalid string position");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xran:

; 2296 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2289 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2290 : 		_Xlength_error("string too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 2291 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__Ptr$3 = -20						; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2272 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2273 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$3[ebp], ecx

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2279 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$3[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$3[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2285 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2286 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2256 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2259 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2260 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2261 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2262 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -208						; size = 4
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2243 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2244 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2245 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2250 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2251 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2236 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2238 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -288						; size = 4
tv203 = -288						; size = 4
tv204 = -284						; size = 4
tv202 = -284						; size = 4
$T2 = -273						; size = 1
$T3 = -261						; size = 1
$T4 = -249						; size = 1
__Ptr$ = -48						; size = 4
__Newres$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2203 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2204 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+24]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	ja	SHORT $LN5@Copy

; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx

; 2210 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2211 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2216 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2218 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2222 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2223 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2224 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2225 : 
; 2226 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2229 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2231 : 		this->_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2232 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2233 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@Copy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN23@Copy:
	DD	1
	DD	$LN22@Copy
$LN22@Copy:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@Copy
$LN20@Copy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-292]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv75 = -232						; size = 4
$T1 = -221						; size = 1
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1758 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1759 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv75[ebp], eax
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1761 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1753 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1754 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 1755 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -32					; size = 4
__Ptr$2 = -20						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1342 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1343 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1344 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1345 : 		if (this->_Mysize - _Off <= _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1347 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1350 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], ecx

; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	push	edx
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1352 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1353 : 			}
; 1354 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1355 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1334 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1335 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1336 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1337 : 		_Eos(_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1338 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1339 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1167 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1168 : 		_DEBUG_POINTER(_Ptr);

	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1170 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign

; 1151 : 			_DEBUG_POINTER(_Ptr);

	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:

; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:

; 1157 : 
; 1158 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1161 : 			_Eos(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1162 : 			}
; 1163 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 1164 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1131 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1132 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1133 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1134 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign:

; 1135 : 
; 1136 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1138 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1142 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1143 : 			}
; 1144 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1145 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 781  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 782  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 783  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 683  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 685  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -17					; size = 1
_this$ = -8						; size = 4
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 672  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 673  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 674  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 675  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 676  : 		_Alproxy.destroy(this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 677  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 678  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 679  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -228						; size = 8
__Alproxy$ = -17					; size = 1
_this$ = -8						; size = 4
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 663  : 		{	// construct proxy from _Alval

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 664  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 665  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 666  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 667  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 668  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 669  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 649  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 651  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 643  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 644  : 		{	// construct allocator from _Al
; 645  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 646  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 517  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 521  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 510  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 511  : 		return (this->_BUF_SIZE <= this->_Myres
; 512  : 			? _STD addressof(*this->_Bx._Ptr)
; 513  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 514  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 492  : 	_String_val()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 493  : 		{	// initialize values
; 494  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 495  : 		_Myres = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 496  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 858  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 859  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 847  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 848  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 801  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 802  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 734  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 735  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 736  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 611  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 613  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 579  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 574  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 552  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -197						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 69   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -197						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	esi, esp
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 557  :     return _hypot(_X, _Y);

	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp___hypot
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 558  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
